<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:ns1="http://sozi.baierouge.fr"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="297mm"
   height="210mm"
   viewBox="0 0 1052.3622 744.09448"
   id="svg2"
   version="1.1"
   inkscape:version="0.91 r"
   sodipodi:docname="5.svg">
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="7.919596"
     inkscape:cx="634.59622"
     inkscape:cy="356.0852"
     inkscape:document-units="px"
     inkscape:current-layer="layer1"
     showgrid="false"
     inkscape:window-width="1366"
     inkscape:window-height="716"
     inkscape:window-x="0"
     inkscape:window-y="161"
     inkscape:window-maximized="1" />
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     transform="translate(0,-308.26772)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Capa 1">
    <g
       id="flowRoot4136"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="translate(-62.857143,375.41058)">
      <path
         id="path4317"
         style=""
         d="m 249.1209,59.638281 2,0 0,5.16 c 0,2 -0.88,2.72 -2.28,2.72 -1.4,0 -2.28,-0.72 -2.28,-2.72 l 0,-15.12 c 0,-2 0.88,-2.76 2.28,-2.76 1.4,0 2.28,0.76 2.28,2.76 l 0,3 4.16,0 0,-2.72 c 0,-4.48 -2.24,-7.04 -6.56,-7.04 -4.32,0 -6.56,2.56 -6.56,7.04 l 0,14.56 c 0,4.48 2.24,7.04 6.56,7.04 4.32,0 6.56,-2.56 6.56,-7.04 l 0,-8.88 -6.16,0 0,4 z" />
      <path
         id="path4319"
         style=""
         d="m 271.8259,71.238281 c -0.44,-1.04 -0.48,-2.04 -0.48,-3.4 l 0,-4.32 c 0,-2.92 -0.72,-5 -2.92,-5.92 l 0,-0.08 c 1.96,-0.92 2.88,-2.76 2.88,-5.64 l 0,-2.2 c 0,-4.32 -1.96,-6.44 -6.52,-6.44 l -6.64,0 0,28 4.4,0 0,-11.4 1.52,0 c 2,0 2.88,0.96 2.88,3.56 l 0,4.4 c 0,2.28 0.16,2.72 0.4,3.44 l 4.48,0 z m -7.16,-24 c 1.56,0 2.24,0.88 2.24,2.88 l 0,2.76 c 0,2.24 -1,2.96 -2.64,2.96 l -1.72,0 0,-8.6 2.12,0 z" />
      <path
         id="path4321"
         style=""
         d="m 283.99965,43.238281 -6.44,0 -4.48,28 4.04,0 0.76,-5.08 5.4,0 0.76,5.08 4.44,0 -4.48,-28 z m -3.48,4.96 0.08,0 2.08,14.16 -4.24,0 2.08,-14.16 z m 0.64,-10.88 -2.72,4.44 2.96,0 4.08,-4.44 -4.32,0 z" />
      <path
         id="path4323"
         style=""
         d="m 294.88965,47.238281 7.24,0 0,-4 -11.64,0 0,28 4.4,0 0,-11.56 5.68,0 0,-4 -5.68,0 0,-8.44 z" />
      <path
         id="path4325"
         style=""
         d="m 304.23965,71.238281 4.4,0 0,-28 -4.4,0 0,28 z" />
      <path
         id="path4327"
         style=""
         d="m 320.41777,60.798281 0,4 c 0,2 -0.88,2.72 -2.28,2.72 -1.4,0 -2.28,-0.72 -2.28,-2.72 l 0,-15.12 c 0,-2 0.88,-2.76 2.28,-2.76 1.4,0 2.28,0.76 2.28,2.76 l 0,3 4.16,0 0,-2.72 c 0,-4.48 -2.24,-7.04 -6.56,-7.04 -4.32,0 -6.56,2.56 -6.56,7.04 l 0,14.56 c 0,4.48 2.24,7.04 6.56,7.04 4.32,0 6.56,-2.56 6.56,-7.04 l 0,-3.72 -4.16,0 z" />
      <path
         id="path4329"
         style=""
         d="m 337.04652,43.238281 -6.44,0 -4.48,28 4.04,0 0.76,-5.08 5.4,0 0.76,5.08 4.44,0 -4.48,-28 z m -3.48,4.96 0.08,0 2.08,14.16 -4.24,0 2.08,-14.16 z" />
      <path
         id="path4331"
         style=""
         d="m 289.21902,111.23828 4.4,0 0,-9.28 5.56,-18.719999 -4.2,0 -3.32,12.76 -0.08,0 -3.32,-12.76 -4.6,0 5.56,18.719999 0,9.28 z" />
      <path
         id="path4333"
         style=""
         d="m 216.22621,123.23828 -6.44,0 -4.48,28 4.04,0 0.76,-5.08 5.4,0 0.76,5.08 4.44,0 -4.48,-28 z m -3.48,4.96 0.08,0 2.08,14.16 -4.24,0 2.08,-14.16 z" />
      <path
         id="path4335"
         style=""
         d="m 232.11621,151.23828 4.52,0 0,-28 -3.92,0 0,16.76 -0.08,0 -4.44,-16.76 -5.52,0 0,28 3.96,0 0,-20.28 0.08,0 5.4,20.28 z" />
      <path
         id="path4337"
         style=""
         d="m 239.82559,151.23828 4.4,0 0,-28 -4.4,0 0,28 z" />
      <path
         id="path4339"
         style=""
         d="m 253.48371,123.23828 -6.12,0 0,28 3.84,0 0,-19.8 0.08,0 3.2,19.8 4.16,0 2.96,-20.08 0.08,0 0,20.08 4.16,0 0,-28 -6.12,0 -2.96,19.88 -0.08,0 -3.2,-19.88 z" />
      <path
         id="path4341"
         style=""
         d="m 278.80434,123.23828 -6.44,0 -4.48,28 4.04,0 0.76,-5.08 5.4,0 0.76,5.08 4.44,0 -4.48,-28 z m -3.48,4.96 0.08,0 2.08,14.16 -4.24,0 2.08,-14.16 z" />
      <path
         id="path4343"
         style=""
         d="m 293.81621,140.79828 0,4 c 0,2 -0.88,2.72 -2.28,2.72 -1.4,0 -2.28,-0.72 -2.28,-2.72 l 0,-15.12 c 0,-2 0.88,-2.76 2.28,-2.76 1.4,0 2.28,0.76 2.28,2.76 l 0,3 4.16,0 0,-2.72 c 0,-4.48 -2.24,-7.04 -6.56,-7.04 -4.32,0 -6.56,2.56 -6.56,7.04 l 0,14.56 c 0,4.48 2.24,7.04 6.56,7.04 4.32,0 6.56,-2.56 6.56,-7.04 l 0,-3.72 -4.16,0 z" />
      <path
         id="path4345"
         style=""
         d="m 300.68496,151.23828 4.4,0 0,-28 -4.4,0 0,28 z" />
      <path
         id="path4347"
         style=""
         d="m 312.30309,129.67828 c 0,-2 0.88,-2.76 2.28,-2.76 1.4,0 2.28,0.76 2.28,2.76 l 0,15.12 c 0,2 -0.88,2.76 -2.28,2.76 -1.4,0 -2.28,-0.76 -2.28,-2.76 l 0,-15.12 z m -4.4,14.84 c 0,4.48 2.36,7.04 6.68,7.04 4.32,0 6.68,-2.56 6.68,-7.04 l 0,-14.56 c 0,-4.48 -2.36,-7.04 -6.68,-7.04 -4.32,0 -6.68,2.56 -6.68,7.04 l 0,14.56 z m 7.08,-27.2 -2.72,4.44 2.96,0 4.08,-4.44 -4.32,0 z" />
      <path
         id="path4349"
         style=""
         d="m 333.52246,151.23828 4.52,0 0,-28 -3.92,0 0,16.76 -0.08,0 -4.44,-16.76 -5.52,0 0,28 3.96,0 0,-20.28 0.08,0 5.4,20.28 z" />
      <path
         id="path4351"
         style=""
         d="m 356.12371,130.11828 c 0,3 -0.96,5.2 -4.32,8.76 -3.28,3.44 -4.4,5.8 -4.4,8.92 l 0,3.44 12.72,0 0,-4 -8.32,0 c -0.04,-0.2 -0.04,-0.4 -0.04,-0.6 0,-1.48 0.72,-2.8 3.32,-5.6 4.08,-4.36 5.44,-7.36 5.44,-11.08 0,-4.48 -2.24,-7.04 -6.56,-7.04 -4.32,0 -6.56,2.56 -6.56,7.04 l 0,2.72 4.16,0 0,-3 c 0,-2 0.88,-2.76 2.28,-2.76 1.4,0 2.28,0.68 2.28,3.2 z" />
      <path
         id="path4353"
         style=""
         d="m 363.26309,151.23828 6.96,0 c 4.4,0 6.56,-2.44 6.56,-6.92 l 0,-14.16 c 0,-4.48 -2.16,-6.92 -6.56,-6.92 l -6.96,0 0,28 z m 6.88,-24 c 1.4,0 2.24,0.72 2.24,2.72 l 0,14.56 c 0,2 -0.84,2.72 -2.24,2.72 l -2.48,0 0,-20 2.48,0 z" />
    </g>
    <g
       id="flowRoot4136-0"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.99979278,-0.04159106,-0.02035672,1.0010541,312.15731,385.57526)">
      <path
         inkscape:connector-curvature="0"
         id="path4300"
         d="m 234.31777,71.238281 4.4,0 0,-28 -4.4,0 0,28 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4302"
         d="m 251.2959,71.238281 4.52,0 0,-28 -3.92,0 0,16.76 -0.08,0 -4.44,-16.76 -5.52,0 0,28 3.96,0 0,-20.28 0.08,0 5.4,20.28 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4304"
         d="m 269.04527,71.238281 4.52,0 -6.12,-15.52 6.12,-12.48 -4.4,0 -5.68,12.12 -0.08,0 0,-12.12 -4.4,0 0,28 4.4,0 0,-8.6 1.36,-2.56 4.28,11.16 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4306"
         d="m 274.7734,49.958281 c 0,3.2 1.16,5.52 4.84,8.76 2.88,2.52 3.76,4.04 3.76,6.08 0,2 -0.88,2.72 -2.28,2.72 -1.4,0 -2.28,-0.72 -2.28,-2.72 l 0,-2 -4.16,0 0,1.72 c 0,4.48 2.24,7.04 6.56,7.04 4.32,0 6.56,-2.56 6.56,-7.04 0,-3.2 -1.16,-5.52 -4.84,-8.76 -2.88,-2.52 -3.76,-4.04 -3.76,-6.08 0,-2 0.8,-2.76 2.2,-2.76 1.4,0 2.2,0.76 2.2,2.76 l 0,1.16 4.16,0 0,-0.88 c 0,-4.48 -2.2,-7.04 -6.48,-7.04 -4.28,0 -6.48,2.56 -6.48,7.04 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4308"
         d="m 298.85527,60.798281 0,4 c 0,2 -0.88,2.72 -2.28,2.72 -1.4,0 -2.28,-0.72 -2.28,-2.72 l 0,-15.12 c 0,-2 0.88,-2.76 2.28,-2.76 1.4,0 2.28,0.76 2.28,2.76 l 0,3 4.16,0 0,-2.72 c 0,-4.48 -2.24,-7.04 -6.56,-7.04 -4.32,0 -6.56,2.56 -6.56,7.04 l 0,14.56 c 0,4.48 2.24,7.04 6.56,7.04 4.32,0 6.56,-2.56 6.56,-7.04 l 0,-3.72 -4.16,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4310"
         d="m 315.48402,43.238281 -6.44,0 -4.48,28 4.04,0 0.76,-5.08 5.4,0 0.76,5.08 4.44,0 -4.48,-28 z m -3.48,4.96 0.08,0 2.08,14.16 -4.24,0 2.08,-14.16 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4312"
         d="m 328.45402,43.238281 -6.48,0 0,28 4.4,0 0,-10.52 2.08,0 c 4.4,0 6.56,-2.44 6.56,-6.92 l 0,-3.64 c 0,-4.48 -2.16,-6.92 -6.56,-6.92 z m 0,4 c 1.4,0 2.16,0.64 2.16,2.64 l 0,4.2 c 0,2 -0.76,2.64 -2.16,2.64 l -2.08,0 0,-9.48 2.08,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4314"
         d="m 341.45215,47.238281 7.6,0 0,-4 -12,0 0,28 12,0 0,-4 -7.6,0 0,-8.2 6.04,0 0,-4 -6.04,0 0,-7.8 z" />
    </g>
    <g
       id="flowRoot4136-0-8"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:39.99982452px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.66047089,-0.04231835,0.04231835,0.66047089,212.26346,635.00517)">
      <path
         inkscape:connector-curvature="0"
         id="path4224"
         d="m 204.24628,60.798195 0,3.999983 c 0,1.999991 -0.88,2.719988 -2.27999,2.719988 -1.39999,0 -2.27999,-0.719997 -2.27999,-2.719988 l 0,-15.119934 c 0,-1.999991 0.88,-2.759988 2.27999,-2.759988 1.39999,0 2.27999,0.759997 2.27999,2.759988 l 0,2.999987 4.15998,0 0,-2.719988 c 0,-4.47998 -2.23999,-7.039969 -6.55997,-7.039969 -4.31998,0 -6.55997,2.559989 -6.55997,7.039969 l 0,14.559936 c 0,4.47998 2.23999,7.039969 6.55997,7.039969 4.31998,0 6.55997,-2.559989 6.55997,-7.039969 l 0,-3.719984 -4.15998,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4226"
         d="m 215.15498,49.678244 c 0,-1.999991 0.88,-2.759988 2.27999,-2.759988 1.4,0 2.27999,0.759997 2.27999,2.759988 l 0,15.119934 c 0,1.999991 -0.87999,2.759988 -2.27999,2.759988 -1.39999,0 -2.27999,-0.759997 -2.27999,-2.759988 l 0,-15.119934 z M 210.755,64.518179 c 0,4.47998 2.35999,7.039969 6.67997,7.039969 4.31998,0 6.67997,-2.559989 6.67997,-7.039969 l 0,-14.559936 c 0,-4.47998 -2.35999,-7.039969 -6.67997,-7.039969 -4.31998,0 -6.67997,2.559989 -6.67997,7.039969 l 0,14.559936 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4228"
         d="m 233.05428,43.238272 -6.11997,0 0,27.999878 3.83998,0 0,-19.799913 0.08,0 3.19999,19.799913 4.15998,0 2.95998,-20.079912 0.08,0 0,20.079912 4.15999,0 0,-27.999878 -6.11998,0 -2.95998,19.879913 -0.08,0 -3.19999,-19.879913 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4230"
         d="m 255.09481,43.238272 -6.47997,0 0,27.999878 4.39998,0 0,-10.519954 2.07999,0 c 4.39998,0 6.55997,-2.43999 6.55997,-6.91997 l 0,-3.639984 c 0,-4.47998 -2.15999,-6.91997 -6.55997,-6.91997 z m 0,3.999983 c 1.39999,0 2.15999,0.639997 2.15999,2.639988 l 0,4.199982 c 0,1.999991 -0.76,2.639988 -2.15999,2.639988 l -2.07999,0 0,-9.479958 2.07999,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4232"
         d="m 263.6929,71.23815 11.63995,0 0,-3.999983 -7.23997,0 0,-23.999895 -4.39998,0 0,27.999878 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4234"
         d="m 281.68657,47.238255 7.59996,0 0,-3.999983 -11.99994,0 0,27.999878 11.99994,0 0,-3.999983 -7.59996,0 0,-8.199964 6.03997,0 0,-3.999982 -6.03997,0 0,-7.799966 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4236"
         d="m 298.05399,43.238272 -6.11997,0 0,27.999878 3.83998,0 0,-19.799913 0.08,0 3.19999,19.799913 4.15998,0 2.95998,-20.079912 0.08,0 0,20.079912 4.15999,0 0,-27.999878 -6.11998,0 -2.95998,19.879913 -0.08,0 -3.19999,-19.879913 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4238"
         d="m 318.01453,47.238255 7.59997,0 0,-3.999983 -11.99995,0 0,27.999878 11.99995,0 0,-3.999983 -7.59997,0 0,-8.199964 6.03997,0 0,-3.999982 -6.03997,0 0,-7.799966 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4240"
         d="m 337.70195,71.23815 4.51998,0 0,-27.999878 -3.91999,0 0,16.759927 -0.08,0 -4.43999,-16.759927 -5.51997,0 0,27.999878 3.95998,0 0,-20.279911 0.08,0 5.39998,20.279911 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4242"
         d="m 344.13129,47.238255 4.59998,0 0,23.999895 4.39998,0 0,-23.999895 4.59998,0 0,-3.999983 -13.59994,0 0,3.999983 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4244"
         d="m 363.66996,49.678244 c 0,-1.999991 0.87999,-2.759988 2.27999,-2.759988 1.39999,0 2.27999,0.759997 2.27999,2.759988 l 0,15.119934 c 0,1.999991 -0.88,2.759988 -2.27999,2.759988 -1.4,0 -2.27999,-0.759997 -2.27999,-2.759988 l 0,-15.119934 z m -4.39998,14.839935 c 0,4.47998 2.35999,7.039969 6.67997,7.039969 4.31998,0 6.67997,-2.559989 6.67997,-7.039969 l 0,-14.559936 c 0,-4.47998 -2.35999,-7.039969 -6.67997,-7.039969 -4.31998,0 -6.67997,2.559989 -6.67997,7.039969 l 0,14.559936 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4246"
         d="m 374.92928,49.958243 c 0,3.199986 1.15999,5.519976 4.83998,8.759962 2.87998,2.519989 3.75998,4.039982 3.75998,6.079973 0,1.999991 -0.88,2.719988 -2.27999,2.719988 -1.39999,0 -2.27999,-0.719997 -2.27999,-2.719988 l 0,-1.999991 -4.15998,0 0,1.719992 c 0,4.47998 2.23999,7.039969 6.55997,7.039969 4.31998,0 6.55997,-2.559989 6.55997,-7.039969 0,-3.199986 -1.15999,-5.519976 -4.83998,-8.759961 -2.87999,-2.519989 -3.75998,-4.039983 -3.75998,-6.079974 0,-1.999991 0.79999,-2.759988 2.19999,-2.759988 1.39999,0 2.19999,0.759997 2.19999,2.759988 l 0,1.159995 4.15998,0 0,-0.879996 c 0,-4.47998 -2.19999,-7.039969 -6.47997,-7.039969 -4.27998,0 -6.47997,2.559989 -6.47997,7.039969 z" />
    </g>
    <g
       id="flowRoot4136-0-8-8"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:39.99982452px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.3088362,-0.00866025,0.00866025,0.3088362,438.89913,691.80439)">
      <path
         inkscape:connector-curvature="0"
         id="path4215"
         d="m 265.90632,49.958243 c 0,3.199986 1.16,5.519976 4.83998,8.759962 2.87999,2.519989 3.75999,4.039982 3.75999,6.079973 0,1.999991 -0.88,2.719988 -2.27999,2.719988 -1.4,0 -2.27999,-0.719997 -2.27999,-2.719988 l 0,-1.999991 -4.15999,0 0,1.719992 c 0,4.47998 2.23999,7.039969 6.55997,7.039969 4.31999,0 6.55998,-2.559989 6.55998,-7.039969 0,-3.199986 -1.16,-5.519976 -4.83998,-8.759961 -2.87999,-2.519989 -3.75999,-4.039983 -3.75999,-6.079974 0,-1.999991 0.8,-2.759988 2.19999,-2.759988 1.4,0 2.19999,0.759997 2.19999,2.759988 l 0,1.159995 4.15999,0 0,-0.879996 c 0,-4.47998 -2.19999,-7.039969 -6.47998,-7.039969 -4.27998,0 -6.47997,2.559989 -6.47997,7.039969 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4217"
         d="m 285.42811,49.678244 c 0,-1.999991 0.88,-2.759988 2.27999,-2.759988 1.4,0 2.27999,0.759997 2.27999,2.759988 l 0,15.119934 c 0,1.999991 -0.87999,2.759988 -2.27999,2.759988 -1.39999,0 -2.27999,-0.759997 -2.27999,-2.759988 l 0,-15.119934 z m -4.39998,14.839935 c 0,4.47998 2.35999,7.039969 6.67997,7.039969 4.31998,0 6.67997,-2.559989 6.67997,-7.039969 l 0,-14.559936 c 0,-4.47998 -2.35999,-7.039969 -6.67997,-7.039969 -4.31998,0 -6.67997,2.559989 -6.67997,7.039969 l 0,14.559936 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4219"
         d="m 296.96744,43.238272 0,3.999983 7.95996,0 -8.35996,20.079912 0,3.919983 12.87994,0 0,-3.999983 -8.35996,0 8.35996,-20.079912 0,-3.919983 -12.47994,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4221"
         d="m 312.013,71.23815 4.39998,0 0,-27.999878 -4.39998,0 0,27.999878 z" />
    </g>
    <g
       id="flowRoot4136-0-8-8-1"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:39.99982452px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.30891745,-0.00579786,-0.00498106,0.30909125,543.01131,690.39558)">
      <path
         inkscape:connector-curvature="0"
         id="path4281"
         d="m 228.2618,59.638201 1.99999,0 0,5.159977 c 0,1.999991 -0.87999,2.719988 -2.27999,2.719988 -1.39999,0 -2.27999,-0.719997 -2.27999,-2.719988 l 0,-15.119934 c 0,-1.999991 0.88,-2.759988 2.27999,-2.759988 1.4,0 2.27999,0.759997 2.27999,2.759988 l 0,2.999987 4.15998,0 0,-2.719988 c 0,-4.47998 -2.23999,-7.039969 -6.55997,-7.039969 -4.31998,0 -6.55997,2.559989 -6.55997,7.039969 l 0,14.559936 c 0,4.47998 2.23999,7.039969 6.55997,7.039969 4.31998,0 6.55997,-2.559989 6.55997,-7.039969 l 0,-8.879961 -6.15997,0 0,3.999983 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4283"
         d="m 241.68674,47.238255 7.59997,0 0,-3.999983 -11.99995,0 0,27.999878 11.99995,0 0,-3.999983 -7.59997,0 0,-8.199964 6.03998,0 0,-3.999982 -6.03998,0 0,-7.799966 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4285"
         d="m 261.37415,71.23815 4.51998,0 0,-27.999878 -3.91998,0 0,16.759927 -0.08,0 -4.43998,-16.759927 -5.51997,0 0,27.999878 3.95998,0 0,-20.279911 0.08,0 5.39997,20.279911 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4287"
         d="m 273.48348,47.238255 7.59997,0 0,-3.999983 -11.99995,0 0,27.999878 11.99995,0 0,-3.999983 -7.59997,0 0,-8.199964 6.03997,0 0,-3.999982 -6.03997,0 0,-7.799966 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4289"
         d="m 297.45087,71.23815 c -0.44,-1.039996 -0.48,-2.039991 -0.48,-3.399985 l 0,-4.319981 c 0,-2.919988 -0.71999,-4.999979 -2.91999,-5.919975 l 0,-0.08 c 1.96,-0.919996 2.87999,-2.759988 2.87999,-5.639975 l 0,-2.199991 c 0,-4.319981 -1.95999,-6.439972 -6.51997,-6.439972 l -6.63997,0 0,27.999878 4.39998,0 0,-11.39995 1.51999,0 c 2,0 2.87999,0.959995 2.87999,3.559984 l 0,4.399981 c 0,2.27999 0.16,2.719988 0.4,3.439985 l 4.47998,0 z M 290.2909,47.238255 c 1.55999,0 2.23999,0.879996 2.23999,2.879987 l 0,2.759988 c 0,2.23999 -0.99999,2.959987 -2.63999,2.959987 l -1.71999,0 0,-8.599962 2.11999,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4291"
         d="m 309.62457,43.238272 -6.43997,0 -4.47998,27.999878 4.03998,0 0.76,-5.079978 5.39997,0 0.76,5.079978 4.43998,0 -4.47998,-27.999878 z m -3.47999,4.959979 0.08,0 2.07999,14.159938 -4.23998,0 2.07999,-14.159938 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4293"
         d="m 316.11454,71.23815 6.95997,0 c 4.39998,0 6.55997,-2.43999 6.55997,-6.91997 l 0,-14.159938 c 0,-4.47998 -2.15999,-6.91997 -6.55997,-6.91997 l -6.95997,0 0,27.999878 z m 6.87997,-23.999895 c 1.4,0 2.23999,0.719997 2.23999,2.719988 l 0,14.559936 c 0,1.999991 -0.83999,2.719988 -2.23999,2.719988 l -2.47999,0 0,-19.999912 2.47999,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4295"
         d="m 336.48257,49.678244 c 0,-1.999991 0.88,-2.759988 2.27999,-2.759988 1.4,0 2.27999,0.759997 2.27999,2.759988 l 0,15.119934 c 0,1.999991 -0.87999,2.759988 -2.27999,2.759988 -1.39999,0 -2.27999,-0.759997 -2.27999,-2.759988 l 0,-15.119934 z m -4.39998,14.839935 c 0,4.47998 2.35999,7.039969 6.67997,7.039969 4.31998,0 6.67997,-2.559989 6.67997,-7.039969 l 0,-14.559936 c 0,-4.47998 -2.35999,-7.039969 -6.67997,-7.039969 -4.31998,0 -6.67997,2.559989 -6.67997,7.039969 l 0,14.559936 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4297"
         d="m 361.98184,71.23815 c -0.44,-1.039996 -0.48,-2.039991 -0.48,-3.399985 l 0,-4.319981 c 0,-2.919988 -0.72,-4.999979 -2.91999,-5.919975 l 0,-0.08 c 1.95999,-0.919996 2.87999,-2.759988 2.87999,-5.639975 l 0,-2.199991 c 0,-4.319981 -1.95999,-6.439972 -6.51997,-6.439972 l -6.63997,0 0,27.999878 4.39998,0 0,-11.39995 1.51999,0 c 1.99999,0 2.87999,0.959995 2.87999,3.559984 l 0,4.399981 c 0,2.27999 0.16,2.719988 0.4,3.439985 l 4.47998,0 z m -7.15997,-23.999895 c 1.55999,0 2.23999,0.879996 2.23999,2.879987 l 0,2.759988 c 0,2.23999 -1,2.959987 -2.63999,2.959987 l -1.71999,0 0,-8.599962 2.11999,0 z" />
    </g>
    <g
       id="flowRoot4136-0-8-8-1-8"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40.00017166px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.72707293,0.01973026,-0.01973026,0.72707293,518.81838,748.30755)">
      <path
         inkscape:connector-curvature="0"
         id="path4262"
         d="m 235.40566,43.23829 -6.44003,0 -4.48002,28.00012 4.04002,0 0.76,-5.080022 5.40002,0 0.76001,5.080022 4.44002,0 -4.48002,-28.00012 z m -3.48002,4.960021 0.08,0 2.08001,14.160061 -4.24002,0 2.08001,-14.160061 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4264"
         d="m 251.29573,71.23841 4.52002,0 0,-28.00012 -3.92002,0 0,16.760072 -0.08,0 -4.44002,-16.760072 -5.52002,0 0,28.00012 3.96001,0 0,-20.280087 0.08,0 5.40003,20.280087 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4266"
         d="m 259.00514,71.23841 4.40001,0 0,-28.00012 -4.40001,0 0,28.00012 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4268"
         d="m 272.66332,43.23829 -6.12003,0 0,28.00012 3.84002,0 0,-19.800085 0.08,0 3.20001,19.800085 4.16002,0 2.96001,-20.080086 0.08,0 0,20.080086 4.16002,0 0,-28.00012 -6.12003,0 -2.96001,19.880085 -0.08,0 -3.20001,-19.880085 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4270"
         d="m 297.98405,43.23829 -6.44003,0 -4.48002,28.00012 4.04002,0 0.76,-5.080022 5.40003,0 0.76,5.080022 4.44002,0 -4.48002,-28.00012 z m -3.48001,4.960021 0.08,0 2.08,14.160061 -4.24001,0 2.08001,-14.160061 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4272"
         d="m 312.99599,60.798365 0,4.000017 c 0,2.000009 -0.88001,2.720012 -2.28001,2.720012 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720012 l 0,-15.120065 c 0,-2.000008 0.88,-2.760011 2.28001,-2.760011 1.4,0 2.28001,0.760003 2.28001,2.760011 l 0,3.000013 4.16002,0 0,-2.720011 c 0,-4.48002 -2.24001,-7.040031 -6.56003,-7.040031 -4.32002,0 -6.56003,2.560011 -6.56003,7.040031 l 0,14.560062 c 0,4.480019 2.24001,7.04003 6.56003,7.04003 4.32002,0 6.56003,-2.560011 6.56003,-7.04003 l 0,-3.720016 -4.16002,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4274"
         d="m 319.86477,71.23841 4.40002,0 0,-28.00012 -4.40002,0 0,28.00012 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4276"
         d="m 331.48294,49.678317 c 0,-2.000008 0.88001,-2.760011 2.28001,-2.760011 1.40001,0 2.28001,0.760003 2.28001,2.760011 l 0,15.120065 c 0,2.000009 -0.88,2.760012 -2.28001,2.760012 -1.4,0 -2.28001,-0.760003 -2.28001,-2.760012 l 0,-15.120065 z m -4.40002,14.840064 c 0,4.480019 2.36001,7.04003 6.68003,7.04003 4.32002,0 6.68003,-2.560011 6.68003,-7.04003 l 0,-14.560062 c 0,-4.48002 -2.36001,-7.040031 -6.68003,-7.040031 -4.32002,0 -6.68003,2.560011 -6.68003,7.040031 l 0,14.560062 z m 7.08003,-27.200117 -2.72001,4.440019 2.96002,0 4.08001,-4.440019 -4.32002,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4278"
         d="m 352.70241,71.23841 4.52002,0 0,-28.00012 -3.92002,0 0,16.760072 -0.08,0 -4.44002,-16.760072 -5.52002,0 0,28.00012 3.96002,0 0,-20.280087 0.08,0 5.40002,20.280087 z" />
    </g>
    <g
       id="flowRoot4136-0-8-8-1-8-9"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40.00017166px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.13127822,-0.00506927,-0.00356244,0.13151245,606.12264,820.8444)">
      <path
         inkscape:connector-curvature="0"
         id="path4202"
         d="m 250.20291,49.958319 c 0,3.200013 1.16,5.520023 4.84002,8.760037 2.88001,2.520011 3.76002,4.040018 3.76002,6.080026 0,2.000009 -0.88001,2.720012 -2.28001,2.720012 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720012 l 0,-2.000008 -4.16002,0 0,1.720007 c 0,4.480019 2.24001,7.04003 6.56003,7.04003 4.32002,0 6.56002,-2.560011 6.56002,-7.04003 0,-3.200014 -1.16,-5.520024 -4.84002,-8.760037 -2.88001,-2.520011 -3.76001,-4.040018 -3.76001,-6.080027 0,-2.000008 0.8,-2.760011 2.20001,-2.760011 1.4,0 2.20001,0.760003 2.20001,2.760011 l 0,1.160005 4.16001,0 0,-0.880003 c 0,-4.48002 -2.2,-7.040031 -6.48002,-7.040031 -4.28002,0 -6.48003,2.560011 -6.48003,7.040031 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4204"
         d="m 269.49237,71.23841 4.40002,0 0,-9.28004 5.56002,-18.72008 -4.20002,0 -3.32001,12.760055 -0.08,0 -3.32002,-12.760055 -4.60002,0 5.56003,18.72008 0,9.28004 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4206"
         d="m 290.63183,71.23841 4.52002,0 0,-28.00012 -3.92002,0 0,16.760072 -0.08,0 -4.44002,-16.760072 -5.52002,0 0,28.00012 3.96002,0 0,-20.280087 0.08,0 5.40002,20.280087 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4208"
         d="m 302.74126,47.238307 7.24003,0 0,-4.000017 -11.64005,0 0,28.00012 4.40002,0 0,-11.56005 5.68002,0 0,-4.000017 -5.68002,0 0,-8.440036 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4210"
         d="m 312.0913,71.23841 4.40002,0 0,-28.00012 -4.40002,0 0,28.00012 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4212"
         d="m 326.26949,59.63836 2.00001,0 0,5.160022 c 0,2.000009 -0.88001,2.720012 -2.28001,2.720012 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720012 l 0,-15.120065 c 0,-2.000008 0.88,-2.760011 2.28001,-2.760011 1.4,0 2.28001,0.760003 2.28001,2.760011 l 0,3.000013 4.16001,0 0,-2.720011 c 0,-4.48002 -2.24001,-7.040031 -6.56002,-7.040031 -4.32002,0 -6.56003,2.560011 -6.56003,7.040031 l 0,14.560062 c 0,4.480019 2.24001,7.04003 6.56003,7.04003 4.32001,0 6.56002,-2.560011 6.56002,-7.04003 l 0,-8.880038 -6.16002,0 0,4.000017 z" />
    </g>
    <g
       id="flowRoot4136-0-8-8-1-8-9-2"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40.00018692px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.27660536,-0.00150618,-0.00750612,0.27684992,459.18022,852.85416)">
      <path
         inkscape:connector-curvature="0"
         id="path4175"
         d="m 191.96043,49.958322 c 0,3.200015 1.16001,5.520026 4.84003,8.760041 2.88001,2.520012 3.76001,4.040019 3.76001,6.080028 0,2.00001 -0.88,2.720013 -2.28001,2.720013 -1.4,0 -2.28001,-0.720003 -2.28001,-2.720013 l 0,-2.000009 -4.16002,0 0,1.720008 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 0,-3.200015 -1.16,-5.520026 -4.84002,-8.760041 -2.88001,-2.520012 -3.76002,-4.040019 -3.76002,-6.080028 0,-2.00001 0.80001,-2.760013 2.20001,-2.760013 1.40001,0 2.20001,0.760003 2.20001,2.760013 l 0,1.160005 4.16002,0 0,-0.880004 c 0,-4.480021 -2.20001,-7.040033 -6.48003,-7.040033 -4.28002,0 -6.48003,2.560012 -6.48003,7.040033 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4177"
         d="m 211.8424,47.238309 7.60004,0 0,-4.000018 -12.00006,0 0,28.00013 12.00006,0 0,-4.000018 -7.60004,0 0,-8.200039 6.04003,0 0,-4.000018 -6.04003,0 0,-7.800037 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4179"
         d="m 230.72999,60.798373 0,4.000018 c 0,2.00001 -0.88001,2.720013 -2.28001,2.720013 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720013 l 0,-15.12007 c 0,-2.00001 0.88,-2.760013 2.28001,-2.760013 1.4,0 2.28001,0.760003 2.28001,2.760013 l 0,3.000014 4.16002,0 0,-2.720013 c 0,-4.480021 -2.24001,-7.040033 -6.56003,-7.040033 -4.32002,0 -6.56003,2.560012 -6.56003,7.040033 l 0,14.560068 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 l 0,-3.720017 -4.16002,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4181"
         d="m 237.39877,43.238291 0,21.320099 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 l 0,-21.320099 -4.16002,0 0,21.600101 c 0,2.000009 -0.88,2.720012 -2.28001,2.720012 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720012 l 0,-21.600101 -4.40002,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4183"
         d="m 257.93637,47.238309 7.60003,0 0,-4.000018 -12.00005,0 0,28.00013 12.00005,0 0,-4.000018 -7.60003,0 0,-8.200039 6.04003,0 0,-4.000018 -6.04003,0 0,-7.800037 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4185"
         d="m 277.62396,71.238421 4.52002,0 0,-28.00013 -3.92002,0 0,16.760078 -0.08,0 -4.44002,-16.760078 -5.52003,0 0,28.00013 3.96002,0 0,-20.280094 0.08,0 5.40003,20.280094 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4187"
         d="m 293.93341,60.798373 0,4.000018 c 0,2.00001 -0.88,2.720013 -2.28001,2.720013 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720013 l 0,-15.12007 c 0,-2.00001 0.88,-2.760013 2.28001,-2.760013 1.40001,0 2.28001,0.760003 2.28001,2.760013 l 0,3.000014 4.16002,0 0,-2.720013 c 0,-4.480021 -2.24001,-7.040033 -6.56003,-7.040033 -4.32002,0 -6.56003,2.560012 -6.56003,7.040033 l 0,14.560068 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 l 0,-3.720017 -4.16002,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4189"
         d="m 300.80219,71.238421 4.40002,0 0,-28.00013 -4.40002,0 0,28.00013 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4191"
         d="m 318.1404,43.238291 -6.44003,0 -4.48002,28.00013 4.04002,0 0.76,-5.080023 5.40003,0 0.76,5.080023 4.44002,0 -4.48002,-28.00013 z m -3.48002,4.960023 0.08,0 2.08001,14.160066 -4.24002,0 2.08001,-14.160066 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4193"
         d="m 324.07042,49.958322 c 0,3.200015 1.16,5.520026 4.84002,8.760041 2.88002,2.520012 3.76002,4.040019 3.76002,6.080028 0,2.00001 -0.88,2.720013 -2.28001,2.720013 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720013 l 0,-2.000009 -4.16002,0 0,1.720008 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 0,-3.200015 -1.16001,-5.520026 -4.84002,-8.760041 -2.88002,-2.520012 -3.76002,-4.040019 -3.76002,-6.080028 0,-2.00001 0.8,-2.760013 2.20001,-2.760013 1.40001,0 2.20001,0.760003 2.20001,2.760013 l 0,1.160005 4.16002,0 0,-0.880004 c 0,-4.480021 -2.20001,-7.040033 -6.48003,-7.040033 -4.28002,0 -6.48003,2.560012 -6.48003,7.040033 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4195"
         d="m 352.20431,43.238291 -6.48003,0 0,28.00013 4.40002,0 0,-10.520049 2.08001,0 c 4.40002,0 6.56003,-2.440011 6.56003,-6.920032 l 0,-3.640017 c 0,-4.480021 -2.16001,-6.920032 -6.56003,-6.920032 z m 0,4.000018 c 1.40001,0 2.16001,0.640003 2.16001,2.640013 l 0,4.200019 c 0,2.00001 -0.76,2.640013 -2.16001,2.640013 l -2.08001,0 0,-9.480045 2.08001,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4197"
         d="m 370.20252,71.238421 4.52002,0 0,-28.00013 -3.92001,0 0,16.760078 -0.08,0 -4.44002,-16.760078 -5.52003,0 0,28.00013 3.96002,0 0,-20.280094 0.08,0 5.40002,20.280094 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4199"
         d="m 384.51196,59.638367 2.00001,0 0,5.160024 c 0,2.00001 -0.88,2.720013 -2.28001,2.720013 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720013 l 0,-15.12007 c 0,-2.00001 0.88,-2.760013 2.28001,-2.760013 1.40001,0 2.28001,0.760003 2.28001,2.760013 l 0,3.000014 4.16002,0 0,-2.720013 c 0,-4.480021 -2.24001,-7.040033 -6.56003,-7.040033 -4.32002,0 -6.56003,2.560012 -6.56003,7.040033 l 0,14.560068 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 l 0,-8.880041 -6.16003,0 0,4.000018 z" />
    </g>
    <g
       id="flowRoot4136-0-8-8-1-8-9-2-5"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:40.00018692px;line-height:100%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       transform="matrix(0.2818504,-0.00753455,-0.01542998,0.28260037,571.60474,874.05804)">
      <path
         inkscape:connector-curvature="0"
         id="path4249"
         d="m 245.69381,47.238309 4.60002,0 0,24.000112 4.40002,0 0,-24.000112 4.60002,0 0,-4.000018 -13.60006,0 0,4.000018 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4251"
         d="m 274.8727,71.238421 c -0.44001,-1.040004 -0.48001,-2.040009 -0.48001,-3.400015 l 0,-4.320021 c 0,-2.920013 -0.72,-5.000023 -2.92001,-5.920027 l 0,-0.08 c 1.96001,-0.920004 2.88001,-2.760013 2.88001,-5.640026 l 0,-2.20001 c 0,-4.32002 -1.96001,-6.44003 -6.52003,-6.44003 l -6.64003,0 0,28.00013 4.40002,0 0,-11.400053 1.52001,0 c 2.00001,0 2.88001,0.960005 2.88001,3.560017 l 0,4.40002 c 0,2.280011 0.16,2.720013 0.40001,3.440016 l 4.48002,0 z m -7.16004,-24.000112 c 1.56001,0 2.24001,0.880004 2.24001,2.880014 l 0,2.760013 c 0,2.24001 -1,2.960013 -2.64001,2.960013 l -1.72001,0 0,-8.60004 2.12001,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4253"
         d="m 287.0465,43.238291 -6.44003,0 -4.48002,28.00013 4.04002,0 0.76,-5.080023 5.40003,0 0.76,5.080023 4.44002,0 -4.48002,-28.00013 z m -3.48001,4.960023 0.08,0 2.08001,14.160066 -4.24002,0 2.08001,-14.160066 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4255"
         d="m 293.25653,43.238291 0,4.000018 7.96004,0 -8.36004,20.080094 0,3.920018 12.88006,0 0,-4.000018 -8.36004,0 8.36004,-20.080094 0,-3.920018 -12.48006,0 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4257"
         d="m 312.34225,49.678321 c 0,-2.00001 0.88,-2.760013 2.28001,-2.760013 1.4,0 2.28001,0.760003 2.28001,2.760013 l 0,15.12007 c 0,2.00001 -0.88001,2.760013 -2.28001,2.760013 -1.40001,0 -2.28001,-0.760003 -2.28001,-2.760013 l 0,-15.12007 z m -4.40002,14.840069 c 0,4.480021 2.36001,7.040033 6.68003,7.040033 4.32002,0 6.68003,-2.560012 6.68003,-7.040033 l 0,-14.560068 c 0,-4.480021 -2.36001,-7.040033 -6.68003,-7.040033 -4.32002,0 -6.68003,2.560012 -6.68003,7.040033 l 0,14.560068 z" />
      <path
         inkscape:connector-curvature="0"
         id="path4259"
         d="m 323.60167,49.958322 c 0,3.200015 1.16001,5.520026 4.84002,8.760041 2.88002,2.520012 3.76002,4.040019 3.76002,6.080028 0,2.00001 -0.88,2.720013 -2.28001,2.720013 -1.40001,0 -2.28001,-0.720003 -2.28001,-2.720013 l 0,-2.000009 -4.16002,0 0,1.720008 c 0,4.480021 2.24001,7.040033 6.56003,7.040033 4.32002,0 6.56003,-2.560012 6.56003,-7.040033 0,-3.200015 -1.16,-5.520026 -4.84002,-8.760041 -2.88001,-2.520012 -3.76002,-4.040019 -3.76002,-6.080028 0,-2.00001 0.80001,-2.760013 2.20001,-2.760013 1.40001,0 2.20001,0.760003 2.20001,2.760013 l 0,1.160005 4.16002,0 0,-0.880004 c 0,-4.480021 -2.20001,-7.040033 -6.48003,-7.040033 -4.28002,0 -6.48003,2.560012 -6.48003,7.040033 z" />
    </g>
    <path
       inkscape:connector-curvature="0"
       id="rect4171"
       d="m 80.621636,381.1349 291.025994,0 0,189.86002 -291.025994,0 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:2.52914953;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1"
       d="m 452.91514,403.36648 291.02566,-0.43977 0.28691,189.85979 -291.02566,0.43977 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:2.52914953;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4"
       d="m 315.71343,607.98656 178.54579,-7.16736 4.67586,116.47999 -178.54579,7.16736 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:1.55289447;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9"
       d="m 482.42724,700.4446 90.92597,-0.37918 0.24737,59.31843 -90.92597,0.37918 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.79019529;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1"
       d="m 585.75853,700.39903 90.92676,0.0249 -0.0163,59.31896 -90.92676,-0.025 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.79019529;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1-0"
       d="m 670.5341,758.98505 117.39549,0.47288 -0.30849,76.58665 -117.39549,-0.47288 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:1.02022886;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1-0-7"
       d="m 624.55832,824.16744 36.75102,0.10297 -0.0672,23.97569 -36.75102,-0.10298 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.31938449;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1-0-7-5"
       d="m 496.21055,861.21737 86.96127,-0.72152 0.47071,56.73192 -86.96127,0.72152 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.7557593;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1-0-7-5-8"
       d="m 606.63043,881.44243 86.96392,0.2429 -0.15846,56.73364 -86.96392,-0.2429 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.7557593;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1-0-7-5-8-2"
       d="m 711.34,884.26983 86.96253,-0.54798 0.3575,56.73274 -86.96254,0.54798 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.7557593;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
    <g
       transform="matrix(1,-0.09444471,0,1,-14.788239,365.17923)"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:15px;line-height:123.00000191%;font-family:'Bebas Neue';-inkscape-font-specification:'Bebas Neue, Normal';text-align:start;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000080;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       id="flowRoot6435">
      <path
         d="m 746.30219,679.55117 -0.21,3.795 0,4.38 1.65,0 0,-4.38 -0.21,-3.795 -1.23,0 z m 1.41,-0.735 0,-1.59 -1.59,0 0,1.59 1.59,0 z"
         style=""
         id="path8671" />
      <path
         d="m 751.40898,683.37617 0.75,0 0,1.935 c 0,0.75 -0.33,1.02 -0.855,1.02 -0.525,0 -0.855,-0.27 -0.855,-1.02 l 0,-5.67 c 0,-0.75 0.33,-1.035 0.855,-1.035 0.525,0 0.855,0.285 0.855,1.035 l 0,1.125 1.56,0 0,-1.02 c 0,-1.68 -0.84,-2.64 -2.46,-2.64 -1.62,0 -2.46,0.96 -2.46,2.64 l 0,5.46 c 0,1.68 0.84,2.64 2.46,2.64 1.62,0 2.46,-0.96 2.46,-2.64 l 0,-3.33 -2.31,0 0,1.5 z"
         style=""
         id="path8673" />
      <path
         d="m 759.92336,687.72617 c -0.165,-0.39 -0.18,-0.765 -0.18,-1.275 l 0,-1.62 c 0,-1.095 -0.27,-1.875 -1.095,-2.22 l 0,-0.03 c 0.735,-0.345 1.08,-1.035 1.08,-2.115 l 0,-0.825 c 0,-1.62 -0.735,-2.415 -2.445,-2.415 l -2.49,0 0,10.5 1.65,0 0,-4.275 0.57,0 c 0.75,0 1.08,0.36 1.08,1.335 l 0,1.65 c 0,0.855 0.06,1.02 0.15,1.29 l 1.68,0 z m -2.685,-9 c 0.585,0 0.84,0.33 0.84,1.08 l 0,1.035 c 0,0.84 -0.375,1.11 -0.99,1.11 l -0.645,0 0,-3.225 0.795,0 z"
         style=""
         id="path8675" />
      <path
         d="m 764.48852,677.22617 -2.415,0 -1.68,10.5 1.515,0 0.285,-1.905 2.025,0 0.285,1.905 1.665,0 -1.68,-10.5 z m -1.305,1.86 0.03,0 0.78,5.31 -1.59,0 0.78,-5.31 z"
         style=""
         id="path8677" />
      <path
         d="m 770.11797,683.81117 0,1.5 c 0,0.75 -0.33,1.02 -0.855,1.02 -0.525,0 -0.855,-0.27 -0.855,-1.02 l 0,-5.67 c 0,-0.75 0.33,-1.035 0.855,-1.035 0.525,0 0.855,0.285 0.855,1.035 l 0,1.125 1.56,0 0,-1.02 c 0,-1.68 -0.84,-2.64 -2.46,-2.64 -1.62,0 -2.46,0.96 -2.46,2.64 l 0,5.46 c 0,1.68 0.84,2.64 2.46,2.64 1.62,0 2.46,-0.96 2.46,-2.64 l 0,-1.395 -1.56,0 z"
         style=""
         id="path8679" />
      <path
         d="m 772.69375,687.72617 1.65,0 0,-10.5 -1.65,0 0,10.5 z"
         style=""
         id="path8681" />
      <path
         d="m 779.19555,677.22617 -2.415,0 -1.68,10.5 1.515,0 0.285,-1.905 2.025,0 0.285,1.905 1.665,0 -1.68,-10.5 z m -1.305,1.86 0.03,0 0.78,5.31 -1.59,0 0.78,-5.31 z"
         style=""
         id="path8683" />
      <path
         d="m 781.4193,679.74617 c 0,1.2 0.435,2.07 1.815,3.285 1.08,0.945 1.41,1.515 1.41,2.28 0,0.75 -0.33,1.02 -0.855,1.02 -0.525,0 -0.855,-0.27 -0.855,-1.02 l 0,-0.75 -1.56,0 0,0.645 c 0,1.68 0.84,2.64 2.46,2.64 1.62,0 2.46,-0.96 2.46,-2.64 0,-1.2 -0.435,-2.07 -1.815,-3.285 -1.08,-0.945 -1.41,-1.515 -1.41,-2.28 0,-0.75 0.3,-1.035 0.825,-1.035 0.525,0 0.825,0.285 0.825,1.035 l 0,0.435 1.56,0 0,-0.33 c 0,-1.68 -0.825,-2.64 -2.43,-2.64 -1.605,0 -2.43,0.96 -2.43,2.64 z"
         style=""
         id="path8685" />
      <path
         d="m 788.665,685.40117 0.21,-3.795 0,-4.38 -1.65,0 0,4.38 0.21,3.795 1.23,0 z m -1.41,0.735 0,1.59 1.59,0 0,-1.59 -1.59,0 z"
         style=""
         id="path8687" />
    </g>
    <path
       inkscape:connector-curvature="0"
       id="rect4171-1-4-9-1-0-7-5-8-2-8"
       d="m 711.33998,948.55554 86.96253,-0.54798 0.3575,56.73274 -86.96254,0.548 z"
       style="opacity:1;fill:none;fill-opacity:0.94117647;fill-rule:evenodd;stroke:#000000;stroke-width:0.7557593;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" />
  </g>
  <script
     ns1:version="13.11-30213629"
     id="sozi-script">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * Create or augment a namespace.
 *
 * &lt;p&gt;A typical use of this function is:&lt;/p&gt;
 *
 * &lt;pre&gt;
 * namespace(this, &quot;a.b.c&quot;, function (exports, globals) {
 *     exports.foo = function (x) {
 *         ...
 *     };
 * });
 * &lt;/pre&gt;
 *
 * &lt;p&gt;where &lt;code&gt;this&lt;/code&gt; is the global object.&lt;/p&gt;
 *
 * &lt;p&gt;In this example, function &lt;code&gt;foo&lt;/code&gt; is exported and can be
 * called as &lt;code&gt;a.b.c.foo(someValue)&lt;/code&gt;.&lt;/p&gt;
 *
 * @memberOf _global_
 * @param globals The global object
 * @param {String} path The dot-separated path to the namespace
 * @param {Function} body A function to execute in the context of the namespace
 */
function namespace(globals, path, body) {
    &quot;use strict&quot;;
    
    // Start name lookup in the global object
	var current = globals;
	
	// For each name in the given path
	path.split(&quot;.&quot;).forEach(function (name) {
	    // If the current path element does not exist
	    // in the current namespace, create a new sub-namespace
		if (typeof current[name] === &quot;undefined&quot;) {
			current[name] = {};
		}
		
		// Move to the namespace for the current path element
		current = current[name];
	});
	
	// Execute the given function in the last namespace
	if (body) {
	    body(current, globals);
	}
	
	return current;
}


/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.events
 * @namespace A simple event system for Sozi.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.events&quot;, function (exports) {
    /** @lends sozi.events */

    &quot;use strict&quot;;
    
    /**
     * A registry of callback functions for each event type.
     *
     * &lt;p&gt;Call {@link sozi.events.listen} to add a new listener.&lt;/p&gt;
     */
    var listenerRegistry = {};

    /**
     * Adds a listener for a given event type.
     *
     * @memberOf sozi.events
     * @name listen
     * @function
     * @param {String} key The identifier of the event type to listen
     * @param {Function} handler The function to call when a corresponding event is fired
     */
    exports.listen = function (key, handler) {
        if (!listenerRegistry.hasOwnProperty(key)) {
            listenerRegistry[key] = [];
        }
        listenerRegistry[key].push(handler);
    };
    
    /**
     * Fire an event of a given type.
     *
     * &lt;p&gt;All event handlers added for the given event type are
     * executed.&lt;/p&gt;
     *
     * &lt;p&gt;Additional arguments provided to this function are passed
     * to the event handlers.&lt;/p&gt;
     *
     * @memberOf sozi.events
     * @name fire
     * @function
     * @param {String} key The identifier of the event type to fire
     */
    exports.fire = function (key) {
        var args = Array.prototype.slice.call(arguments, 1);
        if (listenerRegistry.hasOwnProperty(key)) {
            listenerRegistry[key].forEach(function (listener) {
                listener.apply(null, args);
            });
        }
    };
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.proto
 * @namespace Helpers for prototype inheritance.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.proto&quot;, function (exports) {
    &quot;use strict&quot;;
    
    exports.Object = {
        installConstructors: function () {
            function InstanceConstructor() {}
            InstanceConstructor.prototype = this;
            
            this.instance = function () {
                var result = new InstanceConstructor();
                result.construct.apply(result, arguments);
                return result;
            };
            
            this.subtype = function (anObject) {
                var result = new InstanceConstructor();
                result.augment(anObject);
                result.installConstructors();
                return result;
            };
        },
        
        construct: function () {},
        
        augment: function (anObject) {
            for (var attr in anObject) {
                if (anObject.hasOwnProperty(attr)) {
                    this[attr] = anObject[attr];
                }
            }
            return this;
        },
        
        bind: function (aFunction) {
            var self = this;
            return function () {
                return aFunction.apply(self, arguments);
            }
        }
    };
    
    // Bootstrap the root object
    exports.Object.installConstructors();
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.actions
 * @namespace Callback functions for DOM event handlers
 * @depend namespace.js
 */
namespace(this, &quot;sozi.actions&quot;, function (exports, window) {
    /** @lends sozi.actions */
    
    &quot;use strict&quot;;
    
    // Module aliases
    var player = namespace(window, &quot;sozi.player&quot;);
    var display = namespace(window, &quot;sozi.display&quot;);
    
    // The global document object
    var document = window.document;
    
    // Constants: mouse button numbers
    var DRAG_BUTTON = 0;    // Left button
    var TOC_BUTTON = 1;     // Middle button
    
    // Constants: increments for zooming and rotating,
    // threshold for dragging
    var SCALE_FACTOR = 1.05;
    var ROTATE_STEP = 5;
    var DRAG_THRESHOLD_PX = 5;
    
    /**
     * The status of the current drag operation.
     *
     * @type Boolean
     */
    var mouseDragged = false;
    
    /**
     * The X coordinate of the mouse on the latest &quot;down&quot; or &quot;drag&quot; event.
     *
     * @type Number
     */
    var mouseLastX = 0;

    /**
     * The Y coordinate of the mouse on the latest &quot;down&quot; or &quot;drag&quot; event.
     *
     * @type Number
     */
    var mouseLastY = 0;
    
    /**
     * Zooms the display in the given direction.
     *
     * &lt;p&gt;Only the sign of &lt;code&gt;direction&lt;/code&gt; is used:&lt;/p&gt;
     * &lt;ul&gt;
     *  &lt;li&gt;zoom in when &lt;code&gt;direction &gt; 0&lt;/code&gt;&lt;/li&gt;
     *  &lt;li&gt;zoom out when &lt;code&gt;direction &lt;= 0&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * &lt;p&gt;The scaling is centered around point (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;).&lt;/p&gt;
     *
     * @param {Number} direction The direction of the scaling operation
     * @param {Number} x The X coordinate of the scaling center
     * @param {Number} y The Y coordinate of the scaling center
     */
    function zoom(direction, x, y) {
        player.stop();
        display.viewPorts[&quot;player&quot;].zoom(direction &gt; 0 ? SCALE_FACTOR : 1 / SCALE_FACTOR, x, y);
    }
    
    /**
     * Rotate the display in the given direction.
     *
     * &lt;p&gt;Only the sign of &lt;code&gt;direction&lt;/code&gt; is used:&lt;/p&gt;
     * &lt;ul&gt;
     *  &lt;li&gt;rotate anticlockwise when direction &gt; 0&lt;/li&gt;
     *  &lt;li&gt;rotate clockwise when direction &lt;= 0&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param {Number} direction The direction of the rotation
     */
    function rotate(direction) {
        player.stop();
        display.viewPorts[&quot;player&quot;].rotate(direction &gt; 0 ? ROTATE_STEP : -ROTATE_STEP);
    }
    
    /**
     * Show/hide the frame list.
     *
     * &lt;p&gt;The presentation stops when the frame list is showed,
     * and restarts when the frame list is hidden.&lt;/p&gt;
     */
    function toggleFrameList() {
        if (sozi.framelist.isVisible()) {
            sozi.framelist.hide();
            player.restart();
        } else {
            player.stop();
            sozi.framelist.show();
        }
    }

    function isPlayerEvent(evt) {
        return display.viewPorts[&quot;player&quot;].contains(evt.clientX, evt.clientY);
    }
    
    /**
     * Event handler: mouse down.
     *
     * &lt;p&gt;When the left button is pressed, we register the current coordinates
     * in case the mouse will be dragged. Handler {@link sozi.actions-onMouseDrag} is set until
     * the button is released ({@link sozi.actions-onMouseUp}).&lt;/p&gt;
     *
     * &lt;p&gt;When the middle button is pressed, the table of contents is shown or hidden.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseDown(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (evt.button === DRAG_BUTTON) {
            document.documentElement.addEventListener(&quot;mousemove&quot;, onMouseDrag, false);
            mouseDragged = false;
            mouseLastX = evt.clientX;
            mouseLastY = evt.clientY;
        } else if (evt.button === TOC_BUTTON) {
            toggleFrameList();
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: mouse move.
     *
     * &lt;p&gt;If the left mouse button is down, then the mouse move is a drag action.
     * This method computes the displacement since the button was pressed or
     * since the last move, and updates the reference coordinates for the next move.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseDrag(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        player.stop();
        
        // The drag action is confirmed when one of the mouse coordinates
        // has moved past the threshold
        if (!mouseDragged &amp;&amp; (Math.abs(evt.clientX - mouseLastX) &gt; DRAG_THRESHOLD_PX ||
                              Math.abs(evt.clientY - mouseLastY) &gt; DRAG_THRESHOLD_PX)) {
            mouseDragged = true;
        }
        
        if (mouseDragged) {
            sozi.events.fire(&quot;sozi.player.cleanup&quot;);
            display.viewPorts[&quot;player&quot;].drag(evt.clientX - mouseLastX, evt.clientY - mouseLastY);
            mouseLastX = evt.clientX;
            mouseLastY = evt.clientY;
        }
        
        evt.stopPropagation();
    }

    /**
     * Event handler: mouse up.
     *
     * &lt;p&gt;Releasing the left button removes the {@link sozi.actions-onMouseDrag} handler.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onMouseUp(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (evt.button === DRAG_BUTTON) {
            document.documentElement.removeEventListener(&quot;mousemove&quot;, onMouseDrag, false);
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: context menu (i.e right click).
     *
     * &lt;p&gt;Right click goes one frame back.&lt;/p&gt;
     *
     * &lt;p&gt;There is no &quot;click&quot; event for the right mouse button and the menu
     * can't be disabled in {@link sozi.actions-onMouseDown}.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onContextMenu(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        player.moveToPrevious();
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: mouse click.
     *
     * &lt;p&gt;Left-click moves the presentation to the next frame.&lt;/p&gt;
     *
     * &lt;p&gt;No &quot;click&quot; event is generated for the middle button in Firefox.
     * See {@link sozi.actions-onMouseDown} for middle click handling.&lt;/p&gt;
     *
     * &lt;p&gt;Dragging the mouse produces a &quot;click&quot; event when the button is released.
     * If flag {@link sozi.actions-mouseDragged} was set by {@link sozi.actions-onMouseDrag},
     * then the click event is the result of a drag action.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onClick(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        if (!mouseDragged &amp;&amp; evt.button !== TOC_BUTTON) {
            player.moveToNext();
        }
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: mouse wheel.
     *
     * &lt;p&gt;Rolling the mouse wheel stops the presentation and zooms the current display.&lt;/p&gt;
     *
     * FIXME shift key does not work in Opera
     *
     * @param {Event} evt The DOM event object
     */
    function onWheel(evt) {
        if (!isPlayerEvent(evt)) {
            return;
        }
        
        if (!evt) {
            evt = window.event;
        }

        var delta = 0;
        if (evt.wheelDelta) { // IE and Opera
            delta = evt.wheelDelta;
        }
        else if (evt.detail) { // Mozilla
            delta = -evt.detail;
        }
        
        if (delta !== 0) {
            if (evt.shiftKey) {
                rotate(delta);
            }
            else {
                zoom(delta, evt.clientX, evt.clientY);
            }
        }
        
        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: key press.
     *
     * &lt;p&gt;Keyboard handling is split into two methods:
     * {@link sozi.actions-onKeyPress} and {@link sozi.actions-onKeyDown}
     * in order to get the same behavior across browsers.&lt;/p&gt;
     *
     * &lt;p&gt;This method handles character keys &quot;+&quot;, &quot;-&quot;, &quot;=&quot;, &quot;F&quot; and &quot;T&quot;.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onKeyPress(evt) {
        // Keys with modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.charCode || evt.which) {
        case 43: // +
            zoom(1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 45: // -
            zoom(-1, window.innerWidth / 2, window.innerHeight / 2);
            break;
        case 61: // =
            player.moveToCurrent();
            break;
        case 70: // F
        case 102: // f
            player.showAll();
            break;
        case 84: // T
        case 116: // t
            toggleFrameList();
            break;
        case 82: // R
            rotate(-1);
            break;
        case 114: // r
            rotate(1);
            break;
        default:
            return;
        }

        evt.stopPropagation();
        evt.preventDefault();
    }

    /**
     * Event handler: key down.
     *
     * &lt;p&gt;Keyboard handling is split into two methods:
     * {@link sozi.actions-onKeyPress} and {@link sozi.actions-onKeyDown}
     * in order to get the same behavior across browsers.&lt;/p&gt;
     *
     * &lt;p&gt;This method handles navigation keys (arrows, page up/down, home, end)
     * and the space and enter keys.&lt;/p&gt;
     *
     * @param {Event} evt The DOM event object
     */
    function onKeyDown(evt) {
        // Keys with Alt/Ctrl/Meta modifiers are ignored
        if (evt.altKey || evt.ctrlKey || evt.metaKey) {
            return;
        }

        switch (evt.keyCode) {
            case 36: // Home
                if (evt.shiftKey) {
                    player.jumpToFirst();
                }
                else {
                    player.moveToFirst();
                }
                break;
            case 35: // End
                if (evt.shiftKey) {
                    player.jumpToLast();
                }
                else {
                    player.moveToLast();
                }
                break;
            case 38: // Arrow up
            case 33: // Page up
            case 37: // Arrow left
                if (evt.shiftKey) {
                    player.jumpToPrevious();
                }
                else {
                    player.moveToPrevious();
                }
                break;
            case 40: // Arrow down
            case 34: // Page down
            case 39: // Arrow right
            case 13: // Enter
            case 32: // Space
                if (evt.shiftKey) {
                    player.jumpToNext();
                }
                else {
                    player.moveToNext();
                }
                break;
            default:
                // Ignore other keys and propagate the event
                return;
        }
        
        // Stop event propagation for supported keys
        evt.stopPropagation();
        
        // In some versions of Chrome/Chromium, preventDefault() inhibits the &quot;keypress&quot; event
        evt.preventDefault();
    }

    /**
     * Dummy event handler: stop event propagation.
     *
     * @param {Event} evt The DOM event object
     */
    function stopEvent(evt) {
        evt.stopPropagation();
    }

    /**
     * Event handler: document load.
     *
     * &lt;p&gt;This function sets up all other event handlers for the player.&lt;/p&gt;
     */
    function onDisplayReady() {
        // Prevent event propagation when clicking on a link
        // FIXME does not work in Firefox when the &lt;a&gt; is referenced through a &lt;use&gt;
        var links = document.getElementsByTagName(&quot;a&quot;);
        for (var i = 0; i &lt; links.length; i += 1) {
            links[i].addEventListener(&quot;click&quot;, stopEvent, false);
            links[i].addEventListener(&quot;contextmenu&quot;, stopEvent, false);
        }
        
        // Mouse events are constrained to the player viewport
        // see isPlayerEvent()
        // TODO also use shift-click as an alternative for middle-click
        var svgRoot = document.documentElement;
        svgRoot.addEventListener(&quot;click&quot;, onClick, false);
        svgRoot.addEventListener(&quot;mousedown&quot;, onMouseDown, false);
        svgRoot.addEventListener(&quot;mouseup&quot;, onMouseUp, false);
        svgRoot.addEventListener(&quot;contextmenu&quot;, onContextMenu, false);
        svgRoot.addEventListener(&quot;DOMMouseScroll&quot;, onWheel, false); // Mozilla
        window.onmousewheel = onWheel;

        // Keyboard events are global to the SVG document
        svgRoot.addEventListener(&quot;keypress&quot;, onKeyPress, false);
        svgRoot.addEventListener(&quot;keydown&quot;, onKeyDown, false);
    }

    sozi.events.listen(&quot;sozi.display.ready&quot;, onDisplayReady); // @depend events.js
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.animation
 * @namespace A general-purpose animation controller.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.animation&quot;, function (exports, window) {
    /** @lends sozi.animation */
    
    &quot;use strict&quot;;
    
    /**
     * The browser-specific function to request an animation frame.
     *
     * @function
     */
    var requestAnimationFrame =
            window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.oRequestAnimationFrame;

    var getCurrentTime = function () {
        return window.performance &amp;&amp; window.performance.now ?
            window.performance.now() :
            Date.now();
    };

    exports.setAnimationFrameHandlers = function (requestAnimationFrameFunction, getCurrentTimeFunction) {
        requestAnimationFrame = requestAnimationFrameFunction;
        getCurrentTime = getCurrentTimeFunction;
    };

    /**
     * The default time step.
     *
     * &lt;p&gt;For browsers that do not support animation frames.&lt;/p&gt;
     *
     * @constant
     * @type Number
     */
    var TIME_STEP_MS = 40;
    
    /**
     * The handle provided by &lt;code&gt;setInterval()&lt;/code&gt;.
     *
     * &lt;p&gt;For browsers that do not support animation frames.&lt;/p&gt;
     */
    var timer;
    
    /**
     * The list of running animators.
     *
     * @type Array
     */
    var animatorList = [];
    
    /**
     * The main animation loop.
     *
     * &lt;p&gt;This function is called periodically and triggers the
     * animation steps in all running animators.&lt;/p&gt;
     *
     * &lt;p&gt;If all animators are removed from the list of running animators,
     * then the periodic calling is disabled.&lt;/p&gt;
     *
     * &lt;p&gt;This function can be called either through {@link sozi.animation-requestAnimationFrame}
     * if the browser supports it, or through &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;
     */
    function loop() {
        if (animatorList.length &gt; 0) {
            // If there is at least one animator,
            // and if the browser provides animation frames,
            // schedule this function to be called again in the next frame.
            if (requestAnimationFrame) {
                requestAnimationFrame(loop);
            }

            // Step all animators
            animatorList.forEach(function (animator) {
                // TODO use timestamp argument:
                // browser compatibility issue with Date.now()
                // and performance.now() timestamps.
                animator.step(getCurrentTime());
            });
        }
        else {
            // If all animators have been removed,
            // and if this function is called periodically
            // through setInterval, disable the periodic calling.
            if (!requestAnimationFrame) {
                window.clearInterval(timer);
            }
        }
    }
    
    /**
     * Start the animation loop.
     *
     * &lt;p&gt;This function delegates the periodic update of all animators
     * to the {@link sozi.animation-loop} function, either through {@link sozi.animation-requestAnimationFrame}
     * if the browser supports it, or through &lt;code&gt;setInterval()&lt;/code&gt;.&lt;/p&gt;
     */
    function start() {
        if (requestAnimationFrame) {
            requestAnimationFrame(loop);
        }
        else {
            timer = window.setInterval(function () {
                loop(getCurrentTime());
            }, TIME_STEP_MS);
        }
    }
    
    /**
     * Add a new animator object to the list of running animators.
     *
     * &lt;p&gt;If the animator list was empty before calling this function,
     * then the animation loop is started.&lt;/p&gt;
     *
     * @param {sozi.animation.Animator} animator The animator object to add.
     */
    function addAnimator(animator) {
        animatorList.push(animator);
        if (animatorList.length === 1) {
            start();
        }
    }
    
    /**
     * Remove the given animator from the list of running animators.
     *
     * @param {sozi.animation.Animator} animator The animator object to add.
     */
    function removeAnimator(animator) {
        animatorList.splice(animatorList.indexOf(animator), 1);
    }
    
    /**
     * @class
     *
     * An animator provides the logic for animating other objects.
     *
     * &lt;p&gt;The main purpose of an animator is to schedule the update
     * operations in the animated objects.&lt;/p&gt;
     *
     * @memberOf sozi.animation
     * @name Animator
     * @depend proto.js
     */
    exports.Animator = sozi.proto.Object.subtype({
        /** @lends sozi.animation.Animator */
        
        /**
         * Construct a new animator.
         */
        construct: function () {
            /**
             * The animation duration, in milliseconds.
             * @type Number
             */
            this.durationMs = 0;
            
            /**
             * A &quot;payload&quot; object that can be used by {@link sozi.animation.Animator.onStep}
             * and {@link sozi.animation.Animator.onDone}.
             */
            this.data = null;
            
            /**
             * The start time of the animation.
             * @type Number
             */
            this.initialTime = 0;
            
            /**
             * The current state of this animator.
             * @type Boolean
             */
            this.started = false;
        },

        /**
         * Start the current animator.
         *
         * &lt;p&gt;The current animator is added to the list of running animators
         * and is put in the &quot;started&quot; state.
         * It will be removed from the list automatically when the given duration
         * has elapsed.&lt;/p&gt;
         *
         * &lt;p&gt;Method {@link sozi.animation.Animator.onStep} is called once before starting the animation.&lt;/p&gt;
         *
         * @param {Number} durationMs The animation duration, in milliseconds
         * @param data Some data that can be used in {@link sozi.animation.Animator.onStep}
         * and {@link sozi.animation.Animator.onDone}
         */
        start: function (durationMs, data) {
            this.durationMs = durationMs;
            this.data = data;
            this.initialTime = getCurrentTime();
            this.onStep(0);
            if (!this.started) {
                this.started = true;
                addAnimator(this);
            }
        },

        /**
         * Stop the current animator.
         *
         * &lt;p&gt;The current animator is removed from the list of running animators
         * and is put in the &quot;stopped&quot; state.&lt;/p&gt;
         */
        stop: function () {
            if (this.started) {
                removeAnimator(this);
                this.started = false;
            }
        },

        /**
         * Perform one animation step.
         *
         * &lt;p&gt;This function is called automatically by the {@link sozi.animation-loop} function.
         * It calls {@link sozi.animation.Animator.onStep}.
         * If the animation duration has elapsed, {@link sozi.animation.Animator.onDone} is called.&lt;/p&gt;
         *
         * @param {Number} currentTime The current time
         */
        step: function (currentTime) {
            var elapsedTime = currentTime - this.initialTime;
            if (elapsedTime &gt;= this.durationMs) {
                this.stop();
                this.onStep(1);
                this.onDone();
            } else {
                this.onStep(elapsedTime / this.durationMs);
            }
        },
        
        /**
         * This method is called automatically on each animation step.
         *
         * &lt;p&gt;The default implementation does nothing. Override it in a
         * subclass or instance to provide your own implementation.&lt;p&gt;
         *
         * @param {Number} progress The elapsed fraction of the total duration (comprised between 0 and 1 included).
         */
        onStep: function (progress) {
            // Do nothing
        },
        
        /**
         * This method is called automatically when the animation ends.
         *
         * &lt;p&gt;The default implementation does nothing. Override it in a
         * subclass or instance to provide your own implementation.&lt;p&gt;
         */
        onDone: function () {
            // Do nothing
        }
    });

    /*
     * The acceleration profiles.
     *
     * Each profile is a function that operates in the interval [0, 1]
     * and produces a result in the same interval.
     *
     * These functions are meant to be called in {@link sozi.animation.Animator.onStep}
     * to transform the progress indicator according to the desired
     * acceleration effect.
     */
    exports.profiles = {
        &quot;linear&quot;: function (x) {
            return x;
        },

        &quot;accelerate&quot;: function (x) {
            return Math.pow(x, 3);
        },

        &quot;strong-accelerate&quot;: function (x) {
            return Math.pow(x, 5);
        },

        &quot;decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 3);
        },

        &quot;strong-decelerate&quot;: function (x) {
            return 1 - Math.pow(1 - x, 5);
        },

        &quot;accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 3) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-accelerate-decelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = Math.pow(2 * xs, 5) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 2)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },

        &quot;strong-decelerate-accelerate&quot;: function (x) {
            var xs = x &lt;= 0.5 ? x : 1 - x,
                y = (1 - Math.pow(1 - 2 * xs, 3)) / 2;
            return x &lt;= 0.5 ? y : 1 - y;
        },
        
        &quot;immediate-beginning&quot;: function (x) {
            return 1;
        },
        
        &quot;immediate-end&quot;: function (x) {
            return x === 1 ? 1 : 0;
        },
        
        &quot;immediate-middle&quot;: function (x) {
            return x &gt;= 0.5 ? 1 : 0;
        }
    };
});


/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.display
 * @namespace Display management.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.display&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // Constant: the Sozi namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

    var XLINK_NS = &quot;http://www.w3.org/1999/xlink&quot;;
    
    // The global document object
    var document = window.document;
    
    // The initial bounding box of the whole document,
    // assigned in onDocumentReady()
    var initialBBox;
    
    var lastWindowWidth;
    var lastWindowHeight;
    
    exports.viewPorts = {};
    
    var primaryViewport;

    /**
     * @depend proto.js
     */
    exports.CameraState = sozi.proto.Object.subtype({
        construct : function () {
            // Center coordinates
            this.cx = this.cy = 0;
            
            // Dimensions
            this.width = this.height = 1;
            
            // Rotation angle, in degrees
            this.angle = 0;
            
            // Clipping
            this.clipped = true;
            
            // Transition zoom
            this.transitionZoomPercent = 0;
            
            // Transition profile
            this.transitionProfile = sozi.animation.profiles.linear;
            
            // Transition path
            this.transitionPath = null;
        },

        setCenter: function (cx, cy) {
            this.cx = cx;
            this.cy = cy;
            return this;
        },
        
        setSize: function (width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        
        setClipped: function (clipped) {
            this.clipped = clipped;
            return this;
        },
        
        /*
         * Set the angle of the current camera state.
         * The angle of the current state is normalized
         * in the interval [-180 ; 180]
         */
        setAngle: function (angle) {
            this.angle = (angle + 180) % 360 - 180;
            return this;
        },
        
        setRawAngle: function (angle) {
            this.angle = angle;
            return this;
        },
        
        setTransitionZoomPercent: function (zoomPercent) {
            this.transitionZoomPercent = zoomPercent;
            return this;
        },
        
        setTransitionProfile: function (profile) {
            this.transitionProfile = profile;
            return this;
        },
        
        setTransitionPath: function (svgPath) {
            this.transitionPath = svgPath;
            return this;
        },
        
        /*
         * Set the current camera's properties to the given SVG element.
         *
         * If the element is a rectangle, the properties of the frames are based
         * on the geometrical properties of the rectangle.
         * Otherwise, the properties of the frame are based on the bounding box
         * of the given element.
         *
         * Parameters:
         *    - svgElement: an element from the SVG DOM
         */
        setAtElement: function (svgElement) {
            // Read the raw bounding box of the given SVG element
            var x, y, w, h;
            if (svgElement.nodeName === &quot;rect&quot;) {
                x = svgElement.x.baseVal.value;
                y = svgElement.y.baseVal.value;
                w = svgElement.width.baseVal.value;
                h = svgElement.height.baseVal.value;
            } else {
                var b = svgElement.getBBox();
                x = b.x;
                y = b.y;
                w = b.width;
                h = b.height;
            }

            // Compute the raw coordinates of the center
            // of the given SVG element
            var c = document.documentElement.createSVGPoint();
            c.x = x + w / 2;
            c.y = y + h / 2;
            
            // Compute the coordinates of the center of the given SVG element
            // after its current transformation
            var matrix = svgElement.getCTM();
            c = c.matrixTransform(matrix);

            // Compute the scaling factor applied to the given SVG element
            var scale = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);
            
            // Update the camera to match the bounding box information of the
            // given SVG element after its current transformation
            return this.setCenter(c.x, c.y)
                .setSize(w * scale, h * scale)
                .setAngle(Math.atan2(matrix.b, matrix.a) * 180 / Math.PI);
        },

        setAtState: function (other) {
            return this.setCenter(other.cx, other.cy)
                .setSize(other.width, other.height)
                .setAngle(other.angle)
                .setClipped(other.clipped)
                .setTransitionZoomPercent(other.transitionZoomPercent)
                .setTransitionProfile(other.transitionProfile)
                .setTransitionPath(other.transitionPath);
        },
        
        interpolatableAttributes: [&quot;width&quot;, &quot;height&quot;, &quot;angle&quot;],
        
        interpolate: function (initialState, finalState, ratio, useTransitionPath, reverseTransitionPath) {
            var remaining = 1 - ratio;
            for (var i = 0; i &lt; this.interpolatableAttributes.length; i += 1) {
                var attr = this.interpolatableAttributes[i];
                this[attr] = finalState[attr] * ratio + initialState[attr] * remaining;
            }

            var svgPath = reverseTransitionPath ? initialState.transitionPath : finalState.transitionPath;
            if (useTransitionPath &amp;&amp; svgPath) {
                var pathLength = svgPath.getTotalLength();
                
                if (reverseTransitionPath) {
                    var startPoint = svgPath.getPointAtLength(pathLength);
                    var endPoint = svgPath.getPointAtLength(0);
                    var currentPoint = svgPath.getPointAtLength(pathLength * remaining);
                }
                else {
                    var startPoint = svgPath.getPointAtLength(0);
                    var endPoint = svgPath.getPointAtLength(pathLength);
                    var currentPoint = svgPath.getPointAtLength(pathLength * ratio);
                }
 
                this.cx = currentPoint.x + (finalState.cx - endPoint.x) * ratio + (initialState.cx - startPoint.x) * remaining;
                this.cy = currentPoint.y + (finalState.cy - endPoint.y) * ratio + (initialState.cy - startPoint.y) * remaining;
            }
            else {
                this.cx = finalState.cx * ratio + initialState.cx * remaining;
                this.cy = finalState.cy * ratio + initialState.cy * remaining;
            }
        }
    });
    
    exports.Camera = exports.CameraState.subtype({
        construct: function (viewPort, idLayer) {
            exports.CameraState.construct.call(this);
            
            this.viewPort = viewPort;
            
            // Clipping rectangle
            this.svgClipRect = document.createElementNS(SVG_NS, &quot;rect&quot;);
        
            // Clipping path
            var svgClipPath = document.createElementNS(SVG_NS, &quot;clipPath&quot;);
            svgClipPath.setAttribute(&quot;id&quot;, &quot;sozi-clip-path-&quot; + viewPort.id + &quot;-&quot; + idLayer);
            svgClipPath.appendChild(this.svgClipRect);
            viewPort.svgGroup.appendChild(svgClipPath);

            // The group that will support the clipping operation
            var svgClippedGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            svgClippedGroup.setAttribute(&quot;clip-path&quot;, &quot;url(#sozi-clip-path-&quot; + viewPort.id + &quot;-&quot; + idLayer + &quot;)&quot;);
            viewPort.svgGroup.appendChild(svgClippedGroup);
            
            if (viewPort.isPrimary) {
                // This group will support transformations
                // we keep the layer group clean since it can be referenced
                // from &lt;use&gt; elements
                this.svgLayer = document.createElementNS(SVG_NS, &quot;g&quot;);
                this.svgLayer.appendChild(document.getElementById(idLayer));
            }
            else {
                // A &lt;use&gt; element referencing the target layer
                this.svgLayer = document.createElementNS(SVG_NS, &quot;use&quot;);
                this.svgLayer.setAttributeNS(XLINK_NS, &quot;href&quot;, &quot;#&quot; + idLayer);
            }
            svgClippedGroup.appendChild(this.svgLayer);
        },
        
        setAtState: function (other) {
            return exports.CameraState.setAtState.call(this, other).update();
        },
        
        getScale: function () {
            return Math.min(this.viewPort.width / this.width, this.viewPort.height / this.height);
        },
        
        rotate: function (angle) {
            return this.setAngle(this.angle + angle).update();
        },

        zoom: function (factor, x, y) {
            return this.setSize(this.width / factor, this.height / factor)
                       .drag(
                            (1 - factor) * (x - this.viewPort.width / 2),
                            (1 - factor) * (y - this.viewPort.height / 2)
                        );
        },
        
        drag: function (deltaX, deltaY) {
            var scale = this.getScale();
            var angleRad = this.angle * Math.PI / 180;
            var si = Math.sin(angleRad);
            var co = Math.cos(angleRad);
            return this.setCenter(
                    this.cx - (deltaX * co - deltaY * si) / scale,
                    this.cy - (deltaX * si + deltaY * co) / scale
                ).setClipped(false).update();
        },

        update: function () {
            var scale = this.getScale();
                    
            // Compute the size and location of the frame on the screen
            var width = this.width  * scale;
            var height = this.height * scale;
            var x = (this.viewPort.width - width) / 2;
            var y = (this.viewPort.height - height) / 2;

            // Adjust the location and size of the clipping rectangle and the frame rectangle
            this.svgClipRect.setAttribute(&quot;x&quot;, this.clipped ? x : 0);
            this.svgClipRect.setAttribute(&quot;y&quot;, this.clipped ? y : 0);
            this.svgClipRect.setAttribute(&quot;width&quot;,  this.clipped ? width  : this.viewPort.width);
            this.svgClipRect.setAttribute(&quot;height&quot;, this.clipped ? height : this.viewPort.height);
                    
            // Compute and apply the geometrical transformation to the layer group
            var translateX = -this.cx + this.width / 2  + x / scale;
            var translateY = -this.cy + this.height / 2 + y / scale;

            this.svgLayer.setAttribute(&quot;transform&quot;,
                &quot;scale(&quot; + scale + &quot;)&quot; +
                &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)&quot; +
                &quot;rotate(&quot; + (-this.angle) + ',' + this.cx + &quot;,&quot; + this.cy + &quot;)&quot;
            );
            
            return this;
        }
    });
    
    /**
     * @depend proto.js
     */
    exports.ViewPort = sozi.proto.Object.subtype({
        construct: function (id, idLayerList, primary) {
            this.id = id;
            exports.viewPorts[id] = this;
            
            this.isPrimary = !!primary;
            
            if (this.isPrimary) {
                if (primaryViewport) {
                    throw &quot;Failed to create a primary viewport. A primary viewport already exists.&quot;;
                }
                else {
                    primaryViewport = this;
                }
            }
            
            // TODO add a clip path for the viewport
            this.svgGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
            this.svgGroup.setAttribute(&quot;class&quot;, &quot;sozi-viewport&quot;);
            this.svgGroup.setAttribute(&quot;id&quot;, &quot;sozi-viewport-&quot; + id);
            document.documentElement.appendChild(this.svgGroup);
            
            this.setLocation(0, 0).setSize(window.innerWidth, window.innerHeight);
            
            // Create a camera for each layer
            this.cameras = {};
            idLayerList.forEach(function (idLayer) {
                this.cameras[idLayer] = exports.Camera.instance(this, idLayer);
            }, this);
        },
        
        setSize: function (width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        
        setLocation: function (x, y) {
            this.x = x;
            this.y = y;
            return this;
        },

        contains: function (x, y) {
            return x &gt;= this.x &amp;&amp; x &lt; this.x + this.width &amp;&amp;
                   y &gt;= this.y &amp;&amp; y &lt; this.y + this.height;
        },
        
        /*
         * Returns the geometrical properties of the SVG document
         *
         * Returns:
         *    - The default size, translation and rotation for the document's bounding box
         */
        getDocumentState: function () {
            // This object defines the bounding box of the whole document
            var camera = exports.CameraState.instance()
                .setCenter(initialBBox.x + initialBBox.width / 2,
                           initialBBox.y + initialBBox.height / 2)
                .setSize(initialBBox.width, initialBBox.height)
                .setClipped(false);
            
            // Copy the document's bounding box to all layers
            var result = {};
            for (var idLayer in this.cameras) {
                result[idLayer] = camera;
            }
            return result;
        },

        /*
         * Apply geometrical transformations to the image according to the current
         * geometrical attributes of this Display.
         *
         * This method is called automatically when the window is resized.
         */
        update: function () {
            this.svgGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + this.x + &quot;,&quot; + this.y + &quot;)&quot;);
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].update();
            }
            return this;
        },

        /*
         * Transform the SVG document to show the given frame.
         *
         * Parameters:
         *    - frame: the frame to show
         */
        showFrame: function (frame) {
            for (var idLayer in frame.states) {
                this.cameras[idLayer].setAtState(frame.states[idLayer]);
            }
            return this;
        },

        /*
         * Apply an additional translation to the SVG document based on onscreen coordinates.
         *
         * Parameters:
         *    - deltaX: the horizontal displacement, in pixels
         *    - deltaY: the vertical displacement, in pixels
         */
        drag: function (deltaX, deltaY) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].drag(deltaX, deltaY);
            }
            return this;
        },

        /*
         * Zooms the display with the given factor.
         *
         * The zoom is centered around (x, y) with respect to the center of the display area.
         */
        zoom: function (factor, x, y) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].zoom(factor, x, y);
            }
            return this;
        },

        /*
         * Rotate the display with the given angle.
         *
         * The rotation is centered around the center of the display area.
         */
        rotate: function (angle) {
            for (var idLayer in this.cameras) {
                this.cameras[idLayer].rotate(angle);
            }
            return this;
        },
        
        /**
         * The default handler for window resize events.
         *
         * @param widthRatio The horizontal resize ratio
         * @param heightRatio The vertical resize ratio
         */
        onWindowResize: function (widthRatio, heightRatio) {
            this.setLocation(this.x * widthRatio, this.y * heightRatio)
                .setSize(this.width * widthRatio, this.height * heightRatio)
                .update();
        }
    });
    
    /*
     * Initializes the current Display.
     *
     * This method prepares the DOM representation of the current SVG document.
     * All the image is embedded into a global &quot;g&quot; element on which transformations will be applied.
     * A clipping rectangle is added.
     *
     * This method must be called when the document is ready to be manipulated.
     */
    function onDocumentReady() {
        var svgRoot = document.documentElement; // TODO check SVG tag
        
        // Save the initial bounding box of the document
        // and force its dimensions to the browser window
        initialBBox = svgRoot.getBBox();
        lastWindowWidth = window.innerWidth;
        lastWindowHeight = window.innerHeight;
        svgRoot.setAttribute(&quot;width&quot;, lastWindowWidth);
        svgRoot.setAttribute(&quot;height&quot;, lastWindowHeight);
        
        sozi.events.fire(&quot;sozi.display.ready&quot;);
    }

    /*
     * Resizes the SVG document to fit the browser window.
     *
     * This method calls onWindowResize on all registered viewports.
     */
    function resize() {
        var svgRoot = document.documentElement;
        svgRoot.setAttribute(&quot;width&quot;, window.innerWidth);
        svgRoot.setAttribute(&quot;height&quot;, window.innerHeight);
        
        for (var vp in exports.viewPorts) {
            exports.viewPorts[vp].onWindowResize(window.innerWidth / lastWindowWidth, window.innerHeight / lastWindowHeight);
        }

        lastWindowWidth = window.innerWidth;
        lastWindowHeight = window.innerHeight;
    }
    
    sozi.events.listen(&quot;sozi.document.ready&quot;, onDocumentReady); // @depend events.js
    window.addEventListener(&quot;resize&quot;, resize, false);
});

/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2013 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
*
* See http://sozi.baierouge.fr/wiki/en:license for details.
*/

/**
 * @name sozi.document
 * @namespace Document analysis.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.document&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the global document object
    var document = window.document;
    
    // Constant: the Sozi namespace
    var SOZI_NS = &quot;http://sozi.baierouge.fr&quot;;
    
    // Constant: the default frame properties, if missing in the SVG document
    var DEFAULTS = {
        &quot;title&quot;: &quot;Untitled&quot;,
        &quot;sequence&quot;: &quot;0&quot;,
        &quot;hide&quot;: &quot;true&quot;,
        &quot;clip&quot;: &quot;true&quot;,
        &quot;show-in-frame-list&quot;: &quot;true&quot;,
        &quot;timeout-enable&quot;: &quot;false&quot;,
        &quot;timeout-ms&quot;: &quot;5000&quot;,
        &quot;transition-duration-ms&quot;: &quot;1000&quot;,
        &quot;transition-zoom-percent&quot;: &quot;0&quot;,
        &quot;transition-profile&quot;: &quot;linear&quot;,
        &quot;transition-path-hide&quot;: &quot;true&quot;
    };

    var DRAWABLE_TAGS = [ &quot;g&quot;, &quot;image&quot;, &quot;path&quot;, &quot;rect&quot;, &quot;circle&quot;,
        &quot;ellipse&quot;, &quot;line&quot;, &quot;polyline&quot;, &quot;polygon&quot;, &quot;text&quot;, &quot;clippath&quot; ];

    // The definitions of all valid frames in the current document
    exports.frames = [];
    
    // The list of layer ids managed by Sozi
    exports.idLayerList = [];
    
    /*
    * Returns the value of an attribute of a given Sozi SVG element.
    *
    * If the attribute is empty or does not exist,
    * then a default value is returned (See DEFAULTS).
    */
    function readAttribute(soziElement, attr) {
        return soziElement.getAttributeNS(SOZI_NS, attr) || DEFAULTS[attr];
    }

    function readStateForLayer(frame, idLayer, soziElement) {
        var state = frame.states[idLayer] =
            frame.states[idLayer] || sozi.display.CameraState.instance();
        
        if (typeof state.transitionZoomPercent === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-zoom-percent&quot;)) {
            state.setTransitionZoomPercent(parseInt(readAttribute(soziElement, &quot;transition-zoom-percent&quot;), 10));
        }

        if (typeof state.transitionProfile === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-profile&quot;)) {
            state.setTransitionProfile(sozi.animation.profiles[readAttribute(soziElement, &quot;transition-profile&quot;)]);
        }
        
        if (typeof state.transitionPath === &quot;undefined&quot; || soziElement.hasAttributeNS(SOZI_NS, &quot;transition-path&quot;)) {
            var svgPath = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;transition-path&quot;));
            if (svgPath &amp;&amp; svgPath.nodeName === &quot;path&quot;) {
                state.setTransitionPath(svgPath);
                if (readAttribute(soziElement, &quot;transition-path-hide&quot;) === &quot;true&quot;) {
                    svgPath.style.visibility = &quot;hidden&quot;;
                }
            }
        }
        
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;refid&quot;)) {
            var svgElement = document.getElementById(soziElement.getAttributeNS(SOZI_NS, &quot;refid&quot;));
            if (svgElement) {
                state.setAtElement(svgElement);
                if (readAttribute(soziElement, &quot;hide&quot;) === &quot;true&quot;) {
                    svgElement.style.visibility = &quot;hidden&quot;;
                }
            }
        }
            
        if (soziElement.hasAttributeNS(SOZI_NS, &quot;clip&quot;)) {
            state.setClipped(readAttribute(soziElement, &quot;clip&quot;) === &quot;true&quot;);
        }
    }
    
    /*
    * Builds the list of frames from the current document.
    *
    * This method collects all elements with tag &quot;sozi:frame&quot; and
    * retrieves their geometrical and animation attributes.
    * SVG elements that should be hidden during the presentation are hidden.
    *
    * The resulting list is available in frames, sorted by frame indices.
    */
    function readFrames() {
        // Collect all group ids referenced in &lt;layer&gt; elements
        var idLayerRefList = [];
        var soziLayerList = document.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;);
        for (var i = 0; i &lt; soziLayerList.length; i += 1) {
            var idLayer = soziLayerList[i].getAttributeNS(SOZI_NS, &quot;group&quot;);
            if (idLayer &amp;&amp; idLayerRefList.indexOf(idLayer) === -1) {
                idLayerRefList.push(idLayer);
            }
        }

        // Reorganize the document, grouping objects that do not belong
        // to a group referenced in &lt;layer&gt; elements
        var svgRoot = document.documentElement;
        var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

        // Create the first wrapper group
        var svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);

        // For each child of the root SVG element
        var svgElementList = Array.prototype.slice.call(svgRoot.childNodes);
        svgElementList.forEach(function (svgElement, index) {
            if (!svgElement.getAttribute) {
                // Remove text elements
                svgRoot.removeChild(svgElement);
            }
            else if (idLayerRefList.indexOf(svgElement.getAttribute(&quot;id&quot;)) !== -1) {
                // If the current element is a referenced layer ...
                if (svgWrapper.firstChild) {
                    // ... and if there were other non-referenced elements before it,
                    // append the wrapper group to the &lt;defs&gt; element
                    svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + index);
                    exports.idLayerList.push(&quot;sozi-wrapper-&quot; + index);
                    svgRoot.insertBefore(svgWrapper, svgElement);
                    
                    // Prepare a new wrapper element
                    svgWrapper = document.createElementNS(SVG_NS, &quot;g&quot;);
                }
                
                // ... append the current element to the &lt;defs&gt; element
                exports.idLayerList.push(svgElement.getAttribute(&quot;id&quot;));
            }
            else if (DRAWABLE_TAGS.indexOf(svgElement.localName.toLowerCase()) !== -1) {
                // If the current element is not a referenced layer
                // and is drawable, move it to the current wrapper element
                svgRoot.removeChild(svgElement);
                svgWrapper.appendChild(svgElement);
            }
        });

        // Append last wrapper if needed
        if (svgWrapper.firstChild) {
            svgWrapper.setAttribute(&quot;id&quot;, &quot;sozi-wrapper-&quot; + svgElementList.length);
            exports.idLayerList.push(&quot;sozi-wrapper-&quot; + svgElementList.length);
            svgRoot.appendChild(svgWrapper);
        }

        
        // Analyze &lt;frame&gt; elements sorted by sequence number
        var soziFrameList = Array.prototype.slice.call(document.getElementsByTagNameNS(SOZI_NS, &quot;frame&quot;));
        soziFrameList.sort(
            function (a, b) {
                var seqA = parseInt(readAttribute(a, &quot;sequence&quot;), 10);
                var seqB = parseInt(readAttribute(b, &quot;sequence&quot;), 10)
                return seqA - seqB;
            }
        );
        
        soziFrameList.forEach(function (soziFrame, indexFrame) {
            var newFrame = {
                id: soziFrame.getAttribute(&quot;id&quot;),
                title: readAttribute(soziFrame, &quot;title&quot;),
                showInFrameList: readAttribute(soziFrame, &quot;show-in-frame-list&quot;) === &quot;true&quot;,
                sequence: parseInt(readAttribute(soziFrame, &quot;sequence&quot;), 10),
                timeoutEnable: readAttribute(soziFrame, &quot;timeout-enable&quot;) === &quot;true&quot;,
                timeoutMs: parseInt(readAttribute(soziFrame, &quot;timeout-ms&quot;), 10),
                transitionDurationMs: parseInt(readAttribute(soziFrame, &quot;transition-duration-ms&quot;), 10),
                states: {}
            };

            // Get the default properties for all layers, either from
            // the current &lt;frame&gt; element or from the corresponding
            // layer in the previous frame.
            // Those properties can later be overriden by &lt;layer&gt; elements
            exports.idLayerList.forEach(function (idLayer) {
                if (indexFrame === 0 || idLayer.search(&quot;sozi-wrapper-[0-9]+&quot;) !== -1) {
                    // In the first frame, or in wrapper layers,
                    // read layer attributes from the &lt;frame&gt; element
                    readStateForLayer(newFrame, idLayer, soziFrame);
                }
                else {
                    // After the first frame, in referenced layers,
                    // copy attributes from the corresponding layer in the previous frame
                    var currentState = newFrame.states[idLayer] = sozi.display.CameraState.instance();
                    var previousState = exports.frames[exports.frames.length - 1].states[idLayer];
                    currentState.setAtState(previousState);
                }
            });

            // Collect and analyze &lt;layer&gt; elements in the current &lt;frame&gt; element
            var soziLayerList = Array.prototype.slice.call(soziFrame.getElementsByTagNameNS(SOZI_NS, &quot;layer&quot;));
            soziLayerList.forEach(function (soziLayer) {
                var idLayer = soziLayer.getAttributeNS(SOZI_NS, &quot;group&quot;);
                if (idLayer &amp;&amp; exports.idLayerList.indexOf(idLayer) !== -1) {
                    readStateForLayer(newFrame, idLayer, soziLayer);
                }
            });
            
            // If the &lt;frame&gt; element has at least one valid layer,
            // add it to the frame list
            for (var idLayer in newFrame.states) {
                if (newFrame.states.hasOwnProperty(idLayer)) {
                    exports.frames.push(newFrame);
                    break;
                }
            }
        });
    }

    /**
     * Return the frame with the given id.
     *
     * @return The index of the frame with the given id. -1 if not found.
     */
    exports.getFrameIndexForId = function (idFrame) {
        for (var indexFrame = 0; indexFrame &lt; exports.frames.length; indexFrame += 1) {
            if (exports.frames[indexFrame].id === idFrame) {
                return indexFrame;
            }
        }
        return - 1;
    };
    
    /*
     * Event handler: document load.
     *
     * This function reads the frames from the document and fires
     * the &quot;documentready&quot; event.
     *
     * @depend events.js
     */
    function onLoad() {
        document.documentElement.removeAttribute(&quot;viewBox&quot;);
        readFrames();
        sozi.events.fire(&quot;sozi.document.ready&quot;);
    }

    window.addEventListener(&quot;load&quot;, onLoad, false);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.framelist
 * @namespace Show the frame list.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.framelist&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the global document object
	var document = window.document;
	
    // Constant: the margin around the text of the frame list
    var MARGIN = 5;
    
	// The SVG group that will contain the frame list
    var svgTocGroup;
    
    // The SVG group that will contain the frame titles
    var svgTitlesGroup;
    
    // The current height of the frame list,
    // computed during the initialization
    var tocHeight = 0;
    
    // The X coordinate of the frame list in its hidden state
    var translateXHidden;
    
    // The X coordinate of the frame list when it is completely visible
    var translateXVisible;
    
    // The initial X coordinate of the frame list before starting an animation.
    // This variable is set before showing/hiding the frame list.
    var translateXStart;
    
    // The final X coordinate of the frame list for the starting animation.
    // This variable is set before showing/hiding the frame list.
    var translateXEnd;
    
    // The current X coordinate of the frame list for the running animation.
    // This variable is updated on each animation step.
    var translateX;
    
    // The animator object that will manage animations of the frame list
    var animator;
    
    // Constant: the duration of the showing/hiding animation, in milliseconds
    var ANIMATION_TIME_MS = 300;
    
    // Constant: the acceleration profile of the showing/hiding animation
    var ANIMATION_PROFILE = &quot;decelerate&quot;;
    
    // Constant: the SVG namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;

	function onMouseOut(evt) {
        var rel = evt.relatedTarget,
            svgRoot = document.documentElement;
        while (rel &amp;&amp; rel !== svgTocGroup &amp;&amp; rel !== svgRoot) {
            rel = rel.parentNode;
        }
        if (rel !== svgTocGroup) {
            exports.hide();
            sozi.player.restart();
            evt.stopPropagation();
        }
    }

	function onClickArrowUp(evt) {
        var ty = svgTitlesGroup.getCTM().f;
        if (ty &lt;= -window.innerHeight / 2) {
            ty += window.innerHeight / 2;
        } else if (ty &lt; 0) {
            ty = 0;
        }
        svgTitlesGroup.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
	}

	function onClickArrowDown(evt) {
        var ty = svgTitlesGroup.getCTM().f;
        if (ty + tocHeight &gt;= window.innerHeight * 3 / 2) {
            ty -= window.innerHeight / 2;
        } else if (ty + tocHeight &gt; window.innerHeight + 2 * MARGIN) {
            ty = window.innerHeight - tocHeight - 4 * MARGIN;
        }
        svgTitlesGroup.setAttribute(&quot;transform&quot;, &quot;translate(0,&quot; + ty + &quot;)&quot;);
        evt.stopPropagation();
    }

    /*
     * Create a function that responds to clicks on frame list entries.
     */
    function makeClickHandler(index) {
        return function (evt) {
            sozi.player.previewFrame(index);
            evt.stopPropagation();
        };
    }
    
    /*
     * The default event handler, to prevent event propagation
     * through the frame list.
     */
    function defaultEventHandler(evt) {
	    evt.stopPropagation();
    }
    
    /*
     * Adds a table of contents to the document.
     *
     * The table of contents is a rectangular region with the list of frame titles.
     * Clicking on a title moves the presentation to the corresponding frame.
     *
     * The table of contents is hidden by default.
     */
    function onPlayerReady() {
        svgTocGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        svgTocGroup.setAttribute(&quot;id&quot;, &quot;sozi-toc&quot;);
        document.documentElement.appendChild(svgTocGroup);

        svgTitlesGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        svgTocGroup.appendChild(svgTitlesGroup);
    
        // The background rectangle of the frame list
        var tocBackground = document.createElementNS(SVG_NS, &quot;rect&quot;);
        tocBackground.setAttribute(&quot;id&quot;, &quot;sozi-toc-background&quot;);
        tocBackground.setAttribute(&quot;x&quot;, MARGIN);
        tocBackground.setAttribute(&quot;y&quot;, MARGIN);
        tocBackground.setAttribute(&quot;rx&quot;, MARGIN);
        tocBackground.setAttribute(&quot;ry&quot;, MARGIN);
        tocBackground.addEventListener(&quot;click&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        tocBackground.addEventListener(&quot;mouseout&quot;, onMouseOut, false);
        svgTitlesGroup.appendChild(tocBackground);

        var tocWidth = 0;
        sozi.document.frames.forEach(function (frame, frameIndex) {
            if (frame.showInFrameList) {
                var text = document.createElementNS(SVG_NS, &quot;text&quot;);
                text.appendChild(document.createTextNode(frame.title));
                text.setAttribute(&quot;id&quot;, &quot;sozi-toc-&quot; + frame.id);
                svgTitlesGroup.appendChild(text);
    
                if (frameIndex === sozi.player.currentFrameIndex) {
                    text.setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
                }
                         
                var textWidth = text.getBBox().width;
                tocHeight += text.getBBox().height;
                if (textWidth &gt; tocWidth) {
                    tocWidth = textWidth;
                }
    
                text.setAttribute(&quot;x&quot;, 2 * MARGIN);
                text.setAttribute(&quot;y&quot;, tocHeight + MARGIN);
                text.addEventListener(&quot;click&quot;, makeClickHandler(frameIndex), false);
                text.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
            }
        });

        // The &quot;up&quot; button
        var tocUp = document.createElementNS(SVG_NS, &quot;path&quot;);
        tocUp.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocUp.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (5 * MARGIN) +
                           &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                           &quot; l-&quot; + (2 * MARGIN) + &quot;,-&quot; + (3 * MARGIN) +
                           &quot; z&quot;);
        tocUp.addEventListener(&quot;click&quot;, onClickArrowUp, false);
        tocUp.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        svgTocGroup.appendChild(tocUp);

        // The &quot;down&quot; button
        var tocDown = document.createElementNS(SVG_NS, &quot;path&quot;);
        tocDown.setAttribute(&quot;class&quot;, &quot;sozi-toc-arrow&quot;);
        tocDown.setAttribute(&quot;d&quot;, &quot;M&quot; + (tocWidth + 3 * MARGIN) + &quot;,&quot; + (7 * MARGIN) +
                             &quot; l&quot; + (4 * MARGIN) + &quot;,0&quot; +
                             &quot; l-&quot; + (2 * MARGIN) + &quot;,&quot; + (3 * MARGIN) +
                             &quot; z&quot;);
        tocDown.addEventListener(&quot;click&quot;, onClickArrowDown, false);
        tocDown.addEventListener(&quot;mousedown&quot;, defaultEventHandler, false);
        svgTocGroup.appendChild(tocDown);

        tocBackground.setAttribute(&quot;width&quot;, tocWidth + 7 * MARGIN);
        tocBackground.setAttribute(&quot;height&quot;, tocHeight + 2 * MARGIN);
        
        translateXHidden = -tocWidth - 9 * MARGIN;
        translateXVisible = 0;
        translateX = translateXEnd = translateXHidden;
        
        svgTocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateXHidden + &quot;,0)&quot;);
        animator = sozi.animation.Animator.instance().augment({
            onStep: function (progress) {
                var profileProgress = sozi.animation.profiles[ANIMATION_PROFILE](progress),
                    remaining = 1 - profileProgress;
                translateX = translateXEnd * profileProgress + translateXStart * remaining;
                svgTocGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + translateX + &quot;,0)&quot;);
            }
        });
    }

	/*
	 * Highlight the current frame title in the frame list.
	 *
	 * This handler is called on each frame change,
	 * even when the frame list is hidden.
	 */
    function onFrameChange(index) {
        var currentElementList = Array.prototype.slice.call(document.getElementsByClassName(&quot;sozi-toc-current&quot;));
        currentElementList.forEach(function (svgElement) {
            svgElement.removeAttribute(&quot;class&quot;);
        });

        var frame = sozi.document.frames[index];
        if (frame.showInFrameList) {
            document.getElementById(&quot;sozi-toc-&quot; + frame.id).setAttribute(&quot;class&quot;, &quot;sozi-toc-current&quot;);
        }
    }
    
    /*
     * Makes the table of contents visible.
     */
    exports.show = function () {
        // Bring frame list to front
        document.documentElement.appendChild(svgTocGroup);
        
        translateXStart = translateX;
        translateXEnd = translateXVisible;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Makes the table of contents invisible.
     */
    exports.hide = function () {
        translateXStart = translateX;
        translateXEnd = translateXHidden;
        animator.start(ANIMATION_TIME_MS); // FIXME depends on current elapsed time
    };

    /*
     * Returns true if the table of contents is visible, false otherwise.
     */
    exports.isVisible = function () {
        return translateXEnd === translateXVisible;
    };

    // @depend events.js
	sozi.events.listen(&quot;sozi.player.ready&quot;, onPlayerReady);
	sozi.events.listen(&quot;sozi.player.cleanup&quot;, exports.hide);
	sozi.events.listen(&quot;sozi.player.framechange&quot;, onFrameChange);
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.framenumber
 * @namespace Show the frame number.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.framenumber&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    // An alias to the global document object
    var document = window.document;
    
    // The SVG group containing the frame number
    var svgGroup;
    
    // The SVG text element and its text node containing the frame number
    var svgText, svgTextNode;
    
    // The SVG circle enclosing the frame number
    var svgCircle;
    
    // Constant: the SVG namespace
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    
    function adjust() {
        var textBBox = svgText.getBBox(),
            d = Math.max(textBBox.width, textBBox.height) * 0.75,
            t = d * 1.25;
        svgCircle.setAttribute(&quot;r&quot;, d);
        svgGroup.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + t + &quot;,&quot; + t + &quot;)&quot;);
    }
    
    function onPlayerReady() {
        svgGroup = document.createElementNS(SVG_NS, &quot;g&quot;);
        svgText = document.createElementNS(SVG_NS, &quot;text&quot;);
        svgCircle = document.createElementNS(SVG_NS, &quot;circle&quot;);
        
        svgGroup.setAttribute(&quot;id&quot;, &quot;sozi-framenumber&quot;);

        svgCircle.setAttribute(&quot;cx&quot;, 0);
        svgCircle.setAttribute(&quot;cy&quot;, 0);
        svgGroup.appendChild(svgCircle);
        
        svgTextNode = document.createTextNode(sozi.player.currentFrameIndex + 1);
        svgText.setAttribute(&quot;text-anchor&quot;, &quot;middle&quot;);
        svgText.setAttribute(&quot;dominant-baseline&quot;, &quot;central&quot;);
        svgText.setAttribute(&quot;x&quot;, 0);
        svgText.setAttribute(&quot;y&quot;, 0);
        svgText.appendChild(svgTextNode);
        svgGroup.appendChild(svgText);
        
        document.documentElement.appendChild(svgGroup);
        
        adjust();
    }

    function onFrameChange(index) {
        svgTextNode.nodeValue = index + 1;
    }
    
    // @depend events.js
	sozi.events.listen(&quot;sozi.player.ready&quot;, onPlayerReady);
	sozi.events.listen(&quot;sozi.player.framechange&quot;, onFrameChange);
});

/*
* Sozi - A presentation tool using the SVG standard
*
* Copyright (C) 2010-2013 Guillaume Savaton
*
* This program is dual licensed under the terms of the MIT license
* or the GNU General Public License (GPL) version 3.
* A copy of both licenses is provided in the doc/ folder of the
* official release of Sozi.
*
* See http://sozi.baierouge.fr/wiki/en:license for details.
*/

/**
 * @name sozi.links
 * @namespace Links fix for Webkit.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.links&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    var SVG_NS = &quot;http://www.w3.org/2000/svg&quot;;
    var XLINK_NS = &quot;http://www.w3.org/1999/xlink&quot;;
    
    function getClickHandler(index) {
        return function (evt) {
            sozi.player.moveToFrame(index);
            evt.preventDefault();
            evt.stopPropagation();
        };
    }
    
    /*
     * Event handler: document ready.
     *
     * This function adds an event listener to each internal link.
     * Clicking on a link that targets a frame of this document
     * will call sozi.player.moveToFrame().
     */
    function onDocumentReady() {
        var links = window.document.getElementsByTagNameNS(SVG_NS, &quot;a&quot;);
        for (var i = 0; i &lt; links.length; i += 1) {
            var href = links[i].getAttributeNS(XLINK_NS, &quot;href&quot;);
            if (href &amp;&amp; href[0] === &quot;#&quot;) {
                links[i].addEventListener(&quot;click&quot;, getClickHandler(sozi.location.getFrameIndexForHash(href)), false);
            }
        }
    }

    sozi.events.listen(&quot;sozi.document.ready&quot;, onDocumentReady); // @depend events.js
});


/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.location
 * @namespace Manage the URL in the address bar of the browser window.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.location&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    var changedFromWithin = false;

    /*
     * Returns the frame index corresponding to the URL hash.
     *
     * This is a shortcut for sozi.location.getFrameIndexForHash(window.location.hash)
     */
    exports.getFrameIndex = function () {
        return exports.getFrameIndexForHash(window.location.hash);
    };
    
    /*
     * Returns the frame index corresponding to the given URL hash.
     *
     * The URL hash can be either a frame index or a frame id.
     * In the URL, the frame index starts a 1.
     * This method converts it into a 0-based index.
     *
     * If the URL hash is not a positive integer, then 0 is returned.
     * It the URL hash is an integer greater than the last frame index, then
     * the last frame index is returned.
     */
    exports.getFrameIndexForHash = function (hash) {
        var indexOrId = hash ? hash.slice(1) : &quot;1&quot;;
        var index;
        if (/^[0-9]+$/.test(indexOrId)) {
            index = parseInt(indexOrId, 10) - 1;
        }
        else {
            index = sozi.document.getFrameIndexForId(indexOrId);
        }
        
        if (index &lt; 0) {
            return 0;
        }
        else if (index &gt;= sozi.document.frames.length) {
            return sozi.document.frames.length - 1;
        }
        else {
            return index;
        }
    };

    /*
     * Event handler: hash change.
     *
     * This function is called when the URL hash is changed.
     * If the hash was changed manually in the address bar, and if it corresponds to
     * a valid frame number, then the presentation moves to that frame.
     *
     * The hashchange event can be triggered externally, by the user modifying the URL,
     * or internally, by the script modifying window.location.hash.
     */
    function onHashChange() {
        var index = exports.getFrameIndex();
        if (!changedFromWithin) {
            sozi.player.moveToFrame(index);
        }
        changedFromWithin = false;
    }
    
    /*
     * Event handler: frame change.
     *
     * This function is called when the presentation has reached a new frame.
     * The URL hash is set to the current frame id.
     */
    function onFrameChange(index) {
        changedFromWithin = true;
        window.location.hash = &quot;#&quot; + sozi.document.frames[index].id;
    }

    window.addEventListener(&quot;hashchange&quot;, onHashChange, false);
    sozi.events.listen(&quot;sozi.player.framechange&quot;, onFrameChange); // @depend events.js
});

/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 *
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

/**
 * @name sozi.player
 * @namespace Presentation player.
 * @depend namespace.js
 */
namespace(this, &quot;sozi.player&quot;, function (exports, window) {
    &quot;use strict&quot;;
    
    var viewPort;
    
    // The animator object used to animate transitions
    var animator;
    
    // The handle returned by setTimeout() for frame timeout
    var nextFrameTimeout;
    
    // Constants: default animation properties
    // for out-of-sequence transitions
    var DEFAULT_DURATION_MS = 500;
    var DEFAULT_ZOOM_PERCENT = -10;
    var DEFAULT_PROFILE = &quot;linear&quot;;
    
    // The source frame index for the current transition
    var sourceFrameIndex = 0;
    
    // The index of the visible frame
    exports.currentFrameIndex = 0;
    
    // The state of the presentation.
    // If false, no automatic transition will be fired.
    var playing = false;
    
    // The state of the current frame.
    // If true, an automatic transition will be fired after the current timeout.
    var waiting = false;

    /*
     * Starts waiting before moving to the next frame.
     *
     * It the current frame has a timeout set, this method
     * will register a timer to move to the next frame automatically
     * after the specified time.
     *
     * If the current frame is the last, the presentation will
     * move to the first frame.
     */
    function waitTimeout() {
        if (sozi.document.frames[exports.currentFrameIndex].timeoutEnable) {
            waiting = true;
            var index = (exports.currentFrameIndex + 1) % sozi.document.frames.length;
            nextFrameTimeout = window.setTimeout(function () {
                    exports.moveToFrame(index);
                },
                sozi.document.frames[exports.currentFrameIndex].timeoutMs
            );
        }
    }

    /*
     * Starts the presentation from the given frame index (0-based).
     *
     * This method sets the &quot;playing&quot; flag, shows the desired frame
     * and calls waitTimeout.
     */
    exports.startFromIndex = function (index) {
        playing = true;
        waiting = false;
        sourceFrameIndex = index;
        exports.currentFrameIndex = index;
        viewPort.showFrame(sozi.document.frames[index]);
        waitTimeout();
    };

    exports.restart = function () {
        exports.startFromIndex(exports.currentFrameIndex);
    };

    /*
     * Stops the presentation.
     *
     * This method clears the &quot;playing&quot;.
     * If the presentation was in &quot;waiting&quot; mode due to a timeout
     * in the current frame, then it stops waiting.
     * The current animation is stopped in its current state.
     */
    exports.stop = function () {
        animator.stop();
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }
        playing = false;
        sourceFrameIndex = exports.currentFrameIndex;
    };

    function getZoomData(zoomPercent, s0, s1) {
        var result = {
            ss: ((zoomPercent &lt; 0) ? Math.max(s0, s1) : Math.min(s0, s1)) * (100 - zoomPercent) / 100,
            ts: 0.5,
            k: 0
        };

        if (zoomPercent !== 0) {
            var a = s0 - s1;
            var b = s0 - result.ss;
            var c = s1 - result.ss;

            if (a !== 0) {
                var d = Math.sqrt(b * c);

                var u = (b - d) / a;
                var v = (b + d) / a;

                result.ts = (u &gt; 0 &amp;&amp; u &lt;= 1) ? u : v;
            }

            result.k = b / result.ts / result.ts;
        }

        return result;
    }

    /*
     * Jump to a frame with the given index (0-based).
     *
     * This method does not animate the transition from the current
     * state of the display to the desired frame.
     *
     * The presentation is stopped: if a timeout has been set for the
     * target frame, it will be ignored.
     *
     * The URL hash is set to the given frame index (1-based).
     */
    exports.jumpToFrame = function (index) {
        exports.stop();
        sozi.events.fire(&quot;sozi.player.cleanup&quot;);

        sourceFrameIndex = index;
        exports.currentFrameIndex = index;
        viewPort.showFrame(sozi.document.frames[index]);

        sozi.events.fire(&quot;sozi.player.framechange&quot;, index);
    };

    /*
     * Returns an associative array where keys are layer names
     * and values are objects in the form { initialState: finalState: profile: zoomWidth: zoomHeight:}
     */
    exports.getAnimationData = function (initialState, finalState, zoomPercent, profile, useTransitionPath, reverseTransitionPath) {
        var data = {};
        
        for (var idLayer in initialState) {
            data[idLayer] = {
                initialState: sozi.display.CameraState.instance(),
                finalState: sozi.display.CameraState.instance(),
                useTransitionPath: useTransitionPath,
                reverseTransitionPath: reverseTransitionPath
            };
            
            data[idLayer].profile = profile || finalState[idLayer].transitionProfile;
            data[idLayer].initialState.setAtState(initialState[idLayer]);

            // If the current layer is referenced in final state, copy the final properties
            // else, copy initial state to final state for the current layer.
            if (finalState.hasOwnProperty(idLayer)) {
                data[idLayer].finalState.setAtState(finalState[idLayer]);
            }
            else {
                data[idLayer].finalState.setAtState(initialState[idLayer]);
            }

            // Keep the smallest angle difference between initial state and final state
            // TODO this should be handled in the interpolation function
            if (data[idLayer].finalState.angle - data[idLayer].initialState.angle &gt; 180) {
                data[idLayer].finalState.setRawAngle(data[idLayer].finalState.angle - 360);
            }
            else if (data[idLayer].finalState.angle - data[idLayer].initialState.angle &lt; -180) {
                data[idLayer].initialState.setRawAngle(data[idLayer].initialState.angle - 360);
            }

            var zp = zoomPercent || finalState[idLayer].transitionZoomPercent;
            
            if (zp &amp;&amp; finalState.hasOwnProperty(idLayer)) {
                data[idLayer].zoomWidth = getZoomData(zp,
                    initialState[idLayer].width,
                    finalState[idLayer].width);
                data[idLayer].zoomHeight = getZoomData(zp,
                    initialState[idLayer].height,
                    finalState[idLayer].height);
            }
        }
        return data;
    };
    
    exports.previewFrame = function (index) {
        exports.currentFrameIndex = index;
        animator.start(DEFAULT_DURATION_MS,
            exports.getAnimationData(viewPort.cameras, sozi.document.frames[index].states,
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE]),
                false, false);
        sozi.events.fire(&quot;sozi.player.framechange&quot;, index);
    };

    /*
     * Moves to a frame with the given index (0-based).
     *
     * This method animates the transition from the current
     * state of the display to the desired frame.
     *
     * If the given frame index corresponds to the next frame in the list,
     * the transition properties of the next frame are used.
     * Otherwise, default transition properties are used.
     */
    exports.moveToFrame = function (index) {
        if (waiting) {
            window.clearTimeout(nextFrameTimeout);
            waiting = false;
        }

        var durationMs, zoomPercent, profile, useTransitionPath, reverseTransitionPath;
        if (index === (exports.currentFrameIndex - 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[exports.currentFrameIndex].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
            useTransitionPath = true;
            reverseTransitionPath = true;
        }
        else if (index === (exports.currentFrameIndex + 1) % sozi.document.frames.length) {
            durationMs = sozi.document.frames[index].transitionDurationMs;
            zoomPercent = undefined; // Set for each layer
            profile = undefined; // Set for each layer
            useTransitionPath = true;
            reverseTransitionPath = false;
        }
        else {
            durationMs = DEFAULT_DURATION_MS;
            zoomPercent = DEFAULT_ZOOM_PERCENT;
            profile = sozi.animation.profiles[DEFAULT_PROFILE];
            useTransitionPath = false;
            reverseTransitionPath = false;
        }

        sozi.events.fire(&quot;sozi.player.cleanup&quot;);

        playing = true;
        exports.currentFrameIndex = index;

        animator.start(durationMs, exports.getAnimationData(
            viewPort.cameras, sozi.document.frames[index].states,
            zoomPercent, profile,
            useTransitionPath, reverseTransitionPath));

        sozi.events.fire(&quot;sozi.player.framechange&quot;, index);
    };

    /**
     * Jumps to the first frame of the presentation.
     */
    exports.jumpToFirst = function () {
        exports.jumpToFrame(0);
    };
    
    /**
     * Moves to the first frame of the presentation.
     */
    exports.moveToFirst = function () {
        exports.moveToFrame(0);
    };

    /**
     * Jumps to the previous frame.
     */
    exports.jumpToPrevious = function () {
        var index = exports.currentFrameIndex;
        if (!animator.started || sourceFrameIndex &lt;= exports.currentFrameIndex) {
            index -= 1;
        }
        if (index &gt;= 0) {
            exports.jumpToFrame(index);
        }
    };

    /*
     * Moves to the previous frame.
     */
    exports.moveToPrevious = function () {
        for (var index = exports.currentFrameIndex - 1; index &gt;= 0; index -= 1) {
            var frame = sozi.document.frames[index];
            if (!frame.timeoutEnable || frame.timeoutMs !== 0) {
                exports.moveToFrame(index);
                break;
            }
        }
    };

    /**
     * Jumps to the next frame.
     */
    exports.jumpToNext = function () {
        var index = exports.currentFrameIndex;
        if (!animator.started || sourceFrameIndex &gt;= exports.currentFrameIndex) {
            index += 1;
        }
        if (index &lt; sozi.document.frames.length) {
            exports.jumpToFrame(index);
        }
    };

    /**
     * Moves to the next frame.
     */
    exports.moveToNext = function () {
        if (exports.currentFrameIndex &lt; sozi.document.frames.length - 1 || sozi.document.frames[exports.currentFrameIndex].timeoutEnable) {
            exports.moveToFrame((exports.currentFrameIndex + 1) % sozi.document.frames.length);
        }
    };

    /**
     * Jumps to the last frame of the presentation.
     */
    exports.jumpToLast = function () {
        exports.jumpToFrame(sozi.document.frames.length - 1);
    };

    /**
     * Moves to the last frame of the presentation.
     */
    exports.moveToLast = function () {
        exports.moveToFrame(sozi.document.frames.length - 1);
    };

    /*
     * Restores the current frame.
     *
     * This method restores the display to fit the current frame,
     * e.g. after the display has been zoomed or dragged.
     */
    exports.moveToCurrent = function () {
        exports.moveToFrame(exports.currentFrameIndex);
    };

    /*
     * Shows all the document in the browser window.
     */
    exports.showAll = function () {
        exports.stop();
        sozi.events.fire(&quot;sozi.player.cleanup&quot;);
        animator.start(DEFAULT_DURATION_MS,
            exports.getAnimationData(viewPort.cameras, viewPort.getDocumentState(),
                DEFAULT_ZOOM_PERCENT, sozi.animation.profiles[DEFAULT_PROFILE],
                false, false
            )
        );
    };

    /*
     * Event handler: display ready.
     */
    function onDisplayReady() {
        viewPort = sozi.display.ViewPort.instance(&quot;player&quot;, sozi.document.idLayerList, true);
        
        exports.startFromIndex(sozi.location.getFrameIndex());

        // Hack to fix the blank screen bug in Chrome/Chromium
        // See https://github.com/senshu/Sozi/issues/109
        window.setTimeout(viewPort.bind(viewPort.update), 1);
        
        sozi.events.fire(&quot;sozi.player.ready&quot;);
    }

    // TODO move the zoom code to display.js
    exports.onAnimationStep = function (progress, data) {
        for (var idLayer in data) {
            var camera = viewPort.cameras[idLayer];
            
            camera.interpolate(
                data[idLayer].initialState,
                data[idLayer].finalState,
                data[idLayer].profile(progress),
                data[idLayer].useTransitionPath,
                data[idLayer].reverseTransitionPath
            );

            var ps;
            if (data[idLayer].zoomWidth &amp;&amp; data[idLayer].zoomWidth.k !== 0) {
                ps = progress - data[idLayer].zoomWidth.ts;
                camera.width = data[idLayer].zoomWidth.k * ps * ps + data[idLayer].zoomWidth.ss;
            }

            if (data[idLayer].zoomHeight &amp;&amp; data[idLayer].zoomHeight.k !== 0) {
                ps = progress - data[idLayer].zoomHeight.ts;
                camera.height = data[idLayer].zoomHeight.k * ps * ps + data[idLayer].zoomHeight.ss;
            }

            camera.setClipped(data[idLayer].finalState.clipped);
        }

        viewPort.update();
    };
    
    /**
     * @depend animation.js
     */
    animator = sozi.animation.Animator.instance().augment({
        /*
         * Event handler: animation step.
         *
         * This method is called periodically by animator after the animation
         * has been started, and until the animation time is elapsed.
         *
         * Parameter data provides the following information:
         *    - initialState and finalState contain the geometrical properties of the display
         *      at the start and end of the animation.
         *    - profile is a reference to the speed profile function to use.
         *    - zoomWidth and zoomHeight are the parameters of the zooming polynomial if the current
         *      animation has a non-zero zooming effect.
         *
         * Parameter progress is a float number between 0 (start of the animation)
         * and 1 (end of the animation).
         */
        onStep: function (progress) {
            exports.onAnimationStep(progress, this.data);
        },
        
        /*
         * Event handler: animation done.
         *
         * This method is called by animator when the current animation is finished.
         *
         * If the animation was a transition in the normal course of the presentation,
         * then we call the waitTimeout method to process the timeout property of the current frame.
         */
        onDone: function () {
            for (var idLayer in this.data) {
                viewPort.cameras[idLayer].setAtState(this.data[idLayer].finalState);
            }

            viewPort.update();

            sourceFrameIndex = exports.currentFrameIndex;

            if (playing) {
                waitTimeout();
            }
        }
    });

    sozi.events.listen(&quot;sozi.display.ready&quot;, onDisplayReady); // @depend events.js
});

/*
    @depend framenumber.js
    @depend framelist.js
    @depend actions.js
    @depend player.js
    @depend display.js
    @depend document.js
    @depend location.js
    @depend links.js
*/
</script>
  <style
     ns1:version="13.11-30213629"
     id="sozi-style">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

#sozi-toc text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}

#sozi-toc text:hover {
   fill: #0cf;
   cursor: pointer;
}

#sozi-toc text.sozi-toc-current {
   fill: #fa4;
}

#sozi-toc-background {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 10;
   fill: #222;
   fill-opacity: 0.9;
}

.sozi-toc-arrow {
   fill: #eff;
   fill-opacity: 0.75;
   stroke: none;
}

.sozi-toc-arrow:hover {
   fill: #0cf;
}

#sozi-framenumber circle {
   stroke: #222;
   stroke-opacity: 0.1;
   stroke-width: 4;
   fill: #222;
   fill-opacity: 0.9;
}

#sozi-framenumber text {
   fill: #eff;
   font-family: Verdana, sans-serif;
   font-size: 12pt;
}
</style>
  <ns1:frame
     id="frame5548"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="3"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4" />
  <ns1:frame
     id="frame5554"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="8"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1-0-7-5" />
  <ns1:frame
     id="frame5540"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="1"
     ns1:title="Sin título"
     ns1:refid="rect4171" />
  <ns1:frame
     id="frame5552"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="6"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1-0" />
  <ns1:frame
     id="frame5549"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="4"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9" />
  <ns1:frame
     id="frame5555"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="9"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1-0-7-5-8" />
  <ns1:frame
     id="frame5543"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="2"
     ns1:title="Sin título"
     ns1:refid="rect4171-1" />
  <ns1:frame
     id="frame5553"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="7"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1-0-7" />
  <ns1:frame
     id="frame5550"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="5"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1" />
  <g
     transform="matrix(0.27733264,0.00340066,-0.00340066,0.27733264,505.70412,143.67993)"
     id="g4351">
    <rect
       style="fill:#aaaaaa;stroke:none"
       x="0"
       y="0"
       width="640"
       height="480"
       id="rect4353">
      <ns1:video
         ns1:type="video/webm"
         ns1:src="UM01.webm"
         ns1:start-frame="frame5543"
         ns1:stop-frame="frame5548" />
    </rect>
  </g>
  <g
     id="g4807"
     transform="matrix(0.09676634,-0.0012661,0.0012661,0.09676634,500.30715,404.05118)">
    <rect
       id="rect4809"
       height="480"
       width="640"
       y="0"
       x="0"
       style="fill:#aaaaaa;stroke:none">
      <ns1:video
         ns1:stop-frame="frame5550"
         ns1:start-frame="frame5549"
         ns1:src="UM02sozi.webm"
         ns1:type="video/webm" />
    </rect>
  </g>
  <g
     transform="matrix(0.09907277,-3.2774056e-4,3.2774056e-4,0.09907277,600.46198,404.41158)"
     id="g5041">
    <rect
       style="fill:#aaaaaa;stroke:none"
       x="0"
       y="0"
       width="640"
       height="480"
       id="rect5043">
      <ns1:video
         ns1:type="video/webm"
         ns1:src="UM03generador.webm"
         ns1:start-frame="frame5550"
         ns1:stop-frame="frame5552" />
    </rect>
  </g>
  <g
     id="g5279"
     transform="matrix(0.03868197,0,0,0.03868197,632.07672,520.93229)">
    <rect
       id="rect5281"
       height="480"
       width="640"
       y="0"
       x="0"
       style="fill:#aaaaaa;stroke:none">
      <ns1:video
         ns1:stop-frame="frame5554"
         ns1:start-frame="frame5553"
         ns1:src="UM04synfig.webm"
         ns1:type="video/webm" />
    </rect>
  </g>
  <g
     transform="matrix(0.09172158,0,0,0.09172158,510.73109,565.15676)"
     id="g5759">
    <rect
       style="fill:#aaaaaa;stroke:none"
       x="0"
       y="0"
       width="640"
       height="480"
       id="rect5761">
      <ns1:video
         ns1:type="video/webm"
         ns1:src="UM05secpng.webm"
         ns1:start-frame="frame5554"
         ns1:stop-frame="frame5555" />
    </rect>
  </g>
  <ns1:frame
     id="frame6765"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0.0"
     ns1:transition-duration-ms="1000.0"
     ns1:timeout-ms="5000.0"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="10"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1-0-7-5-8-2" />
  <script
     id="sozi-extras-media-script"
     ns1:version="13.11-30213629">/*
 * Sozi - A presentation tool using the SVG standard
 *
 * Copyright (C) 2010-2013 Guillaume Savaton
 *
 * This program is dual licensed under the terms of the MIT license
 * or the GNU General Public License (GPL) version 3.
 * A copy of both licenses is provided in the doc/ folder of the
 * official release of Sozi.
 * 
 * See http://sozi.baierouge.fr/wiki/en:license for details.
 */

this.addEventListener(&quot;load&quot;, function () {
	var	svgNs = &quot;http://www.w3.org/2000/svg&quot;,
	    soziNs = &quot;http://sozi.baierouge.fr&quot;,
		xhtmlNs = &quot;http://www.w3.org/1999/xhtml&quot;,
		window = this,
		document = window.document,
		mediaSources = [],
		mediaList, i, j, k, rect, foreignObject,
		html, htmlMedia, htmlSource;
	
    function clickHandler(evt) {
        evt.stopPropagation();
    }
    
    function registerFrameChangeHandler(htmlMedia, startFrame, stopFrame) {
        sozi.events.listen(&quot;sozi.player.framechange&quot;, function(index) {
            var frameId = sozi.document.frames[index].id;
		    if (frameId === startFrame) {
		        htmlMedia.play();
			}
            else if (frameId === stopFrame) {
                htmlMedia.pause();
            }
		});
    }
    
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;video&quot;));
	mediaSources.push(document.getElementsByTagNameNS(soziNs, &quot;audio&quot;));

	mediaList = [];
	for (k = 0; k &lt; mediaSources.length; k += 1) {
	    for (i = 0; i &lt; mediaSources[k].length; i += 1) {
		    rect = mediaSources[k][i].parentNode;
	
		    // Create HTML media source element
		    htmlSource = document.createElementNS(xhtmlNs, &quot;source&quot;);
		    htmlSource.setAttribute(&quot;type&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;type&quot;));
		    htmlSource.setAttribute(&quot;src&quot;, mediaSources[k][i].getAttributeNS(soziNs, &quot;src&quot;));

		    for (j = 0; j &lt; mediaList.length; j += 1) {
			    if (mediaList[j].rect === rect) {
				    break;
			    }
		    }
	
		    if (j === mediaList.length) {
		        rect.setAttribute(&quot;visibility&quot;, &quot;hidden&quot;);
		        
			    // Create HTML media element
			    htmlMedia = document.createElementNS(xhtmlNs, mediaSources[k][i].localName);
			    htmlMedia.setAttribute(&quot;controls&quot;, &quot;controls&quot;);
			    if (mediaSources[k][i].localName === &quot;video&quot;) {
			        htmlMedia.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			        htmlMedia.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    }
		        htmlMedia.addEventListener(&quot;click&quot;, clickHandler, false);
		        htmlMedia.addEventListener(&quot;contextmenu&quot;, clickHandler, false);
		        
			    // Create HTML root element
			    html = document.createElementNS(xhtmlNs, &quot;html&quot;);
			    html.appendChild(htmlMedia);
		
			    // Create SVG foreign object
			    foreignObject = document.createElementNS(svgNs, &quot;foreignObject&quot;);
			    foreignObject.setAttribute(&quot;x&quot;, rect.getAttribute(&quot;x&quot;));
			    foreignObject.setAttribute(&quot;y&quot;, rect.getAttribute(&quot;y&quot;));
			    foreignObject.setAttribute(&quot;width&quot;, rect.getAttribute(&quot;width&quot;));
			    foreignObject.setAttribute(&quot;height&quot;, rect.getAttribute(&quot;height&quot;));
			    foreignObject.appendChild(html);
				
			    rect.parentNode.insertBefore(foreignObject, rect.nextSibling);
			
			    if (mediaSources[k][i].hasAttributeNS(soziNs, &quot;start-frame&quot;)) {
			        registerFrameChangeHandler(htmlMedia,
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;start-frame&quot;),
			            mediaSources[k][i].getAttributeNS(soziNs, &quot;stop-frame&quot;)
			         );
			    }
			
			    mediaList.push({
				    rect: mediaSources[k][i].parentNode,
				    htmlMedia: htmlMedia
			    });
		    }
	    
    		// Append HTML source element to current HTML media element
    		mediaList[j].htmlMedia.appendChild(htmlSource);
	    }
	}				
}, false);
</script>
  <ns1:frame
     id="frame7536"
     ns1:transition-path-hide="true"
     ns1:transition-profile="linear"
     ns1:transition-zoom-percent="0"
     ns1:transition-duration-ms="1000"
     ns1:timeout-ms="5000"
     ns1:timeout-enable="false"
     ns1:show-in-frame-list="true"
     ns1:clip="true"
     ns1:hide="true"
     ns1:sequence="11"
     ns1:title="Sin título"
     ns1:refid="rect4171-1-4-9-1-0-7-5-8-2-8" />
  <g
     transform="matrix(0.11061157,0,0,0.11061157,715.00943,578.07218)"
     id="g8234">
    <rect
       style="fill:#aaaaaa;stroke:none"
       x="0"
       y="0"
       width="720"
       height="480"
       id="rect8236">
      <ns1:video
         ns1:type="video/webm"
         ns1:src="UM07ejemplos.webm"
         ns1:start-frame="frame6765"
         ns1:stop-frame="frame7536" />
    </rect>
  </g>
  <g
     id="g8517"
     transform="matrix(0.0952381,0,0,0.0952381,617.85714,584.99999)">
    <rect
       id="rect8519"
       height="480"
       width="720"
       y="0"
       x="0"
       style="fill:#aaaaaa;stroke:none">
      <ns1:video
         ns1:stop-frame="frame6765"
         ns1:start-frame="frame5555"
         ns1:src="UM06trazos.webm"
         ns1:type="video/webm" />
    </rect>
  </g>
</svg>
